import streamlit as st
import pandas as pd
import plotly.express as px
# –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ streamlit-aggrid –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —ñ —î –≤ requirements.txt
try:
    from st_aggrid import AgGrid, GridOptionsBuilder, GridUpdateMode, DataReturnMode
except ImportError:
    st.error("–ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ streamlit-aggrid –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–¥–∞–π—Ç–µ 'streamlit-aggrid' –¥–æ requirements.txt —Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –¥–æ–¥–∞—Ç–æ–∫.")
    st.stop()


# ---- –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –°–¢–û–†–Ü–ù–ö–ò ----
st.set_page_config(
    page_title="–¢–æ—Ä–≥–æ–≤–∏–π –î–∞—à–±–æ—Ä–¥",
    page_icon="üíπ",
    layout="wide"
)

st.title("üìä –¢–æ—Ä–≥–æ–≤–∏–π –î–∞—à–±–æ—Ä–¥ –∑ Neon DB")

# ---- –ö–ï–®–£–í–ê–ù–ù–Ø ----
@st.cache_resource
def get_db_connection():
    try:
        conn_obj = st.connection("neon_db", type="sql")
        conn_obj.query("SELECT 1;") # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è
        if 'db_connection_successful' not in st.session_state:
            st.success("üéâ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö Neon DB —É—Å–ø—ñ—à–Ω–µ!")
            st.session_state.db_connection_successful = True
        return conn_obj
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
        st.session_state.db_connection_successful = False
        st.stop()

@st.cache_data(ttl=300)
def load_data(table_name: str):
    local_conn = get_db_connection()
    if not local_conn: # –Ø–∫—â–æ get_db_connection –≤–∏–∫–ª–∏–∫–∞–≤ st.stop(), —Å—é–¥–∏ –Ω–µ –¥—ñ–π–¥–µ
        return pd.DataFrame()
    
    query_table_name_for_log = table_name # –î–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
    try:
        if table_name.lower().startswith("public."):
            actual_table_name_part = table_name.split(".", 1)[1]
            # –Ø–∫—â–æ –Ω–∞–∑–≤–∞ –ø—ñ—Å–ª—è 'public.' –≤–∑—è—Ç–∞ –≤ –ª–∞–ø–∫–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ó—ó —è–∫ —î
            if actual_table_name_part.startswith('"') and actual_table_name_part.endswith('"'):
                 query_table_name = f'public.{actual_table_name_part}'
            # –Ü–Ω–∞–∫—à–µ, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ª–∞–ø–∫–∏ (—Ü–∏—Ñ—Ä–∏/—Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∏)
            elif not actual_table_name_part.replace("_", "").isalnum() or actual_table_name_part[0].isdigit():
                 query_table_name = f'public."{actual_table_name_part}"'
            else: # –ü—Ä–æ—Å—Ç–∞ –Ω–∞–∑–≤–∞
                 query_table_name = f'public.{actual_table_name_part}'
        # –Ø–∫—â–æ 'public.' –Ω–µ–º–∞—î –Ω–∞ –ø–æ—á–∞—Ç–∫—É
        elif not table_name.replace("_", "").isalnum() or table_name[0].isdigit():
             query_table_name = f'public."{table_name}"'
        else: # –ü—Ä–æ—Å—Ç–∞ –Ω–∞–∑–≤–∞ –±–µ–∑ public.
             query_table_name = f'public.{table_name}'
        
        query_table_name_for_log = query_table_name # –û–Ω–æ–≤–ª—é—î–º–æ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è, —è–∫—â–æ –±—É–ª–∞ –∑–º—ñ–Ω–∞
        query = f'SELECT * FROM {query_table_name};'
        df = local_conn.query(query)
        if df.empty:
            st.warning(f"–¢–∞–±–ª–∏—Ü—è '{query_table_name}' (–∑–∞–ø–∏—Ç –¥–ª—è '{table_name}') –ø–æ—Ä–æ–∂–Ω—è –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
        return df
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∑ —Ç–∞–±–ª–∏—Ü—ñ '{table_name}' (—Å–ø—Ä–æ–±–∞ –∑–∞–ø–∏—Ç—É –¥–æ '{query_table_name_for_log}'): {e}")
        return pd.DataFrame()

# ---- –ù–ê–ó–í–ò –¢–ê–ë–õ–ò–¶–¨ –¢–ê –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø ----
ACCOUNTS_TABLE_NAME = "stat_user_account_v2"
DYNAMIC_POSITION_TABLE_NAME_TEMPLATE = "{account_id}_positions_{platform}_v2"

if 'selected_account_id' not in st.session_state:
    st.session_state.selected_account_id = None
if 'selected_account_platform' not in st.session_state:
    st.session_state.selected_account_platform = None
if 'selected_account_positions_df' not in st.session_state:
    st.session_state.selected_account_positions_df = pd.DataFrame()
if 'current_positions_table_name' not in st.session_state:
    st.session_state.current_positions_table_name = ""

conn = get_db_connection()

# ---- –§–£–ù–ö–¶–Ü–Ø –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø –ì–†–ê–§–Ü–ö–Ü–í –ü–û–ó–ò–¶–Ü–ô ----
def display_position_charts(positions_df: pd.DataFrame, table_name: str, account_id_display: str):
    if positions_df.empty:
        return

    st.header(f"–ê–Ω–∞–ª—ñ–∑ –ø–æ–∑–∏—Ü—ñ–π –¥–ª—è –∞–∫–∞—É–Ω—Ç—É {account_id_display} (—Ç–∞–±–ª–∏—Ü—è: {table_name})")

    required_cols_positions = ['net_profit_db', 'change_balance_acc', 'time_close']
    if not all(col in positions_df.columns for col in required_cols_positions):
        st.error(f"–í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—ñ '{table_name}'. –ü–æ—Ç—Ä—ñ–±–Ω—ñ: {', '.join(required_cols_positions)}. –ù–∞—è–≤–Ω—ñ: {positions_df.columns.tolist()}")
        return

    positions_df_cleaned = positions_df.copy()
    for col in ['net_profit_db', 'change_balance_acc']:
        positions_df_cleaned[col] = pd.to_numeric(positions_df_cleaned[col], errors='coerce')

    x_axis_data = positions_df_cleaned.index # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    x_axis_label = '–ù–æ–º–µ—Ä —É–≥–æ–¥–∏' # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º

    if 'time_close' in positions_df_cleaned.columns:
        try:
            # –°–ø—Ä–æ–±—É—î–º–æ —Å–ø–æ—á–∞—Ç–∫—É —è–∫ datetime, —è–∫—â–æ –Ω–µ –≤–∏–π–¥–µ - —è–∫ timestamp, –ø–æ—Ç—ñ–º —è–∫ —á–∏—Å–ª–æ
            temp_time_close = pd.to_datetime(positions_df_cleaned['time_close'], errors='coerce')
            if temp_time_close.isnull().all(): # –Ø–∫—â–æ –≤—Å—ñ NaT, —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —è–∫ timestamp
                st.info(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ 'time_close' —è–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É –¥–∞—Ç—É/—á–∞—Å –¥–ª—è '{table_name}'. –°–ø—Ä–æ–±–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —è–∫ Unix timestamp...")
                temp_time_close = pd.to_datetime(positions_df_cleaned['time_close'], unit='s', origin='unix', errors='coerce')
            
            if not temp_time_close.isnull().all(): # –Ø–∫—â–æ —Ö–æ—á —â–æ—Å—å —Ä–æ–∑–ø—ñ–∑–Ω–∞–ª–æ—Å—è
                positions_df_cleaned['time_close_dt'] = temp_time_close
                positions_df_cleaned.dropna(subset=['net_profit_db', 'change_balance_acc', 'time_close_dt'], inplace=True)
                positions_df_cleaned = positions_df_cleaned.sort_values(by='time_close_dt')
                x_axis_data = positions_df_cleaned['time_close_dt']
                x_axis_label = '–ß–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è'
            else: # –Ø–∫—â–æ —ñ —è–∫ timestamp –Ω–µ –≤–∏–π—à–ª–æ
                raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ time_close —è–∫ datetime –∞–±–æ timestamp")
        except Exception as e_datetime:
            st.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ –∑ –æ–±—Ä–æ–±–∫–æ—é 'time_close' —è–∫ –¥–∞—Ç–∏/—á–∞—Å—É –¥–ª—è '{table_name}': {e_datetime}. –°–ø—Ä–æ–±–∞ –æ–±—Ä–æ–±–∏—Ç–∏ —è–∫ —á–∏—Å–ª–æ –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è.")
            try:
                positions_df_cleaned['time_close_numeric'] = pd.to_numeric(positions_df_cleaned['time_close'], errors='coerce')
                positions_df_cleaned.dropna(subset=['net_profit_db', 'change_balance_acc', 'time_close_numeric'], inplace=True)
                if not positions_df_cleaned.empty:
                    positions_df_cleaned = positions_df_cleaned.sort_values(by='time_close_numeric')
                    x_axis_data = positions_df_cleaned.index 
                    x_axis_label = '–ù–æ–º–µ—Ä —É–≥–æ–¥–∏ (–í—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–æ –∑–∞ —á–∏—Å–ª–æ–º –∑ time_close)'
                else: # –Ø–∫—â–æ –ø—ñ—Å–ª—è dropna –ø–æ—Ä–æ–∂–Ω—å–æ
                    st.info(f"–ù–µ–º–∞—î –≤–∞–ª—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö 'time_close' –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —è–∫ —á–∏—Å–ª–æ –≤ '{table_name}'.")
                    positions_df_cleaned.dropna(subset=['net_profit_db', 'change_balance_acc'], inplace=True) # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø–æ —ñ–Ω–¥–µ–∫—Å—É
            except Exception as e_numeric:
                 st.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ 'time_close' –Ω—ñ —è–∫ –¥–∞—Ç—É/—á–∞—Å, –Ω—ñ —è–∫ —á–∏—Å–ª–æ: {e_numeric}")
                 return
    else:
        st.warning(f"–í—ñ–¥—Å—É—Ç–Ω—è –∫–æ–ª–æ–Ω–∫–∞ 'time_close' –¥–ª—è '{table_name}'. –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ—Ç–æ—á–Ω–∏–º (—Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø–æ —ñ–Ω–¥–µ–∫—Å—É).")
        positions_df_cleaned.dropna(subset=['net_profit_db', 'change_balance_acc'], inplace=True)

    if positions_df_cleaned.empty:
        st.info(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ '{table_name}' –ø—ñ—Å–ª—è –æ—á–∏—Å—Ç–∫–∏.")
        return

    st.subheader("–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ñ—ñ—Ç")
    positions_df_cleaned['cumulative_profit'] = positions_df_cleaned['net_profit_db'].cumsum()
    fig_cumulative_profit = px.line(
        positions_df_cleaned, x=x_axis_data, y='cumulative_profit', title="–î–∏–Ω–∞–º—ñ–∫–∞ –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ—Ç—É",
        labels={'cumulative_profit': '–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ñ—ñ—Ç', x_axis_data.name if hasattr(x_axis_data, 'name') else 'index': x_axis_label }
    )
    fig_cumulative_profit.update_layout(xaxis_title=x_axis_label, yaxis_title="–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ñ—ñ—Ç ($)")
    st.plotly_chart(fig_cumulative_profit, use_container_width=True)

    st.subheader("–î–∏–Ω–∞–º—ñ–∫–∞ –±–∞–ª–∞–Ω—Å—É —Ä–∞—Ö—É–Ω–∫—É")
    fig_balance_change = px.line(
        positions_df_cleaned, x=x_axis_data, y='change_balance_acc', title="–î–∏–Ω–∞–º—ñ–∫–∞ –±–∞–ª–∞–Ω—Å—É —Ä–∞—Ö—É–Ω–∫—É",
        labels={'change_balance_acc': '–ë–∞–ª–∞–Ω—Å', x_axis_data.name if hasattr(x_axis_data, 'name') else 'index': x_axis_label}
    )
    fig_balance_change.update_layout(xaxis_title=x_axis_label, yaxis_title="–ë–∞–ª–∞–Ω—Å —Ä–∞—Ö—É–Ω–∫—É ($)")
    st.plotly_chart(fig_balance_change, use_container_width=True)

# ---- –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –¢–ê –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø –î–ê–ù–ò–• –ü–†–û –ê–ö–ê–£–ù–¢–ò ----
st.header(f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–∫–∞—É–Ω—Ç–∏ (–∑ —Ç–∞–±–ª–∏—Ü—ñ: {ACCOUNTS_TABLE_NAME})")
accounts_df_global = load_data(ACCOUNTS_TABLE_NAME)

if not accounts_df_global.empty:
    required_account_cols = ["account_id", "platform"]
    if not all(col in accounts_df_global.columns for col in required_account_cols):
        missing_cols = [col for col in required_account_cols if col not in accounts_df_global.columns]
        st.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: –≤ —Ç–∞–±–ª–∏—Ü—ñ '{ACCOUNTS_TABLE_NAME}' –≤—ñ–¥—Å—É—Ç–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_cols)}. –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –Ω–µ–º–æ–∂–ª–∏–≤–∞.")
        st.stop()
    
    accounts_df_global["account_id"] = accounts_df_global["account_id"].astype(str).str.strip()
    accounts_df_global["platform"] = accounts_df_global["platform"].astype(str).str.strip()

    columns_to_display = {
        "account_id": "ID –ê–∫–∞—É–Ω—Ç—É", "platform": "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞", "user_id": "ID –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
        "broker_name": "–ë—Ä–æ–∫–µ—Ä", "server": "–°–µ—Ä–≤–µ—Ä", "deposit_currency": "–í–∞–ª—é—Ç–∞ –¥–µ–ø–æ–∑–∏—Ç—É",
        "account_type": "–¢–∏–ø –∞–∫–∞—É–Ω—Ç—É", "account_status": "–°—Ç–∞—Ç—É—Å –∞–∫–∞—É–Ω—Ç—É", "is_active": "–ê–∫—Ç–∏–≤–Ω–∏–π",
        "balance": "–ë–∞–ª–∞–Ω—Å", "initial_deposit": "–ü–æ—á–∞—Ç–∫–æ–≤–∏–π –¥–µ–ø–æ–∑–∏—Ç",
        "total_deposits": "–í—Å—å–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç—ñ–≤", "total_withdrawals": "–í—Å—å–æ–≥–æ –≤–∏–≤–µ–¥–µ–Ω–æ",
        "total_profit": "–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ—Ñ—ñ—Ç"
    }
    
    display_df_accounts = accounts_df_global_filtered = accounts_df_global[[col for col in columns_to_display if col in accounts_df_global.columns]].copy()
    display_df_accounts.rename(columns=columns_to_display, inplace=True)

    currency_columns_keys = ["balance", "initial_deposit", "total_deposits", "total_withdrawals", "total_profit"]
    currency_columns_renamed = [columns_to_display.get(key) for key in currency_columns_keys if columns_to_display.get(key) in display_df_accounts.columns]

    for col in currency_columns_renamed:
        display_df_accounts[col] = pd.to_numeric(display_df_accounts[col], errors='coerce')

    gb = GridOptionsBuilder.from_dataframe(display_df_accounts)
    for col_name in currency_columns_renamed:
        gb.configure_column(col_name, type=["numericColumn", "numberColumnFilter", "customNumericFormat"], precision=2, aggFunc='sum')
    
    active_col_renamed = columns_to_display.get("is_active")
    if active_col_renamed and active_col_renamed in display_df_accounts.columns:
         gb.configure_column(active_col_renamed, cellRenderer='agBooleanCellRenderer', editable=False, width=100)

    gb.configure_selection(selection_mode='single', use_checkbox=False)
    gb.configure_pagination(paginationAutoPageSize=False, paginationPageSize=10)
    gb.configure_default_column(editable=False, filter=True, sortable=True, resizable=True)
    
    gridOptions = gb.build()

    st.subheader("–û–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–µ—Ç–∞–ª–µ–π –ø–æ–∑–∏—Ü—ñ–π:")
    account_grid_response = AgGrid(
        display_df_accounts, gridOptions=gridOptions, data_return_mode=DataReturnMode.AS_INPUT,
        update_mode=GridUpdateMode.MODEL_CHANGED, allow_unsafe_jscode=True, height=350,
        width='100%', fit_columns_on_grid_load=True, theme='streamlit'
    )
    
    selected_rows_df = account_grid_response.get('selected_rows')

    if selected_rows_df is not None and not selected_rows_df.empty:
        first_selected_row = selected_rows_df.iloc[0]
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤–∞–Ω—ñ –Ω–∞–∑–≤–∏ –∫–æ–ª–æ–Ω–æ–∫ –∑ columns_to_display –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å
        id_col_name_display = columns_to_display.get("account_id")
        platform_col_name_display = columns_to_display.get("platform")

        selected_account_id_from_grid = first_selected_row.get(id_col_name_display)
        selected_platform_from_grid = first_selected_row.get(platform_col_name_display)

        if selected_account_id_from_grid is not None and selected_platform_from_grid is not None:
            st.session_state.selected_account_id = str(selected_account_id_from_grid).strip()
            st.session_state.selected_account_platform = str(selected_platform_from_grid).strip()
        else:
            missing_info = []
            if selected_account_id_from_grid is None: missing_info.append(f"'{id_col_name_display}' (–æ—Ä–∏–≥—ñ–Ω–∞–ª: account_id)")
            if selected_platform_from_grid is None: missing_info.append(f"'{platform_col_name_display}' (–æ—Ä–∏–≥—ñ–Ω–∞–ª: platform)")
            st.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ { ' —Ç–∞ '.join(missing_info) } –∑ –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Ä—è–¥–∫–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ.")
            # –ù–µ —Å–∫–∏–¥–∞—î–º–æ, —â–æ–± –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω—É —Å–ø—Ä–æ–±—É –∞–±–æ –∑–±–µ—Ä–µ–≥—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞–Ω
else:
    if 'db_connection_successful' in st.session_state and st.session_state.db_connection_successful:
        empty_msg = "–ø–æ—Ä–æ–∂–Ω—è –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞" if not accounts_df_global.empty else "–Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏"
        st.info(f"–¢–∞–±–ª–∏—Ü—è –∞–∫–∞—É–Ω—Ç—ñ–≤ '{ACCOUNTS_TABLE_NAME}' {empty_msg}. –ù–µ–º–æ–∂–ª–∏–≤–æ –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–∫–∞—É–Ω—Ç—ñ–≤.")
    st.session_state.selected_account_id = None
    st.session_state.selected_account_platform = None

st.markdown("---")

if st.session_state.selected_account_id and st.session_state.selected_account_platform:
    current_account_id = st.session_state.selected_account_id
    current_platform = st.session_state.selected_account_platform
    
    # –í–ê–ñ–õ–ò–í–û: –õ–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è current_platform –Ω–∞ —Ç–µ, —â–æ –≤ –Ω–∞–∑–≤—ñ —Ç–∞–±–ª–∏—Ü—ñ
    # –ü—Ä–∏–∫–ª–∞–¥: —è–∫—â–æ current_platform="MetaTrader 5", –∞ –≤ –Ω–∞–∑–≤—ñ "MT5"
    platform_for_table_name = current_platform # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –±–µ—Ä–µ–º–æ —è–∫ —î
    if "metatrader 5" in current_platform.lower() or "mt5" in current_platform.lower():
        platform_for_table_name = "MT5"
    elif "metatrader 4" in current_platform.lower() or "mt4" in current_platform.lower():
        platform_for_table_name = "MT4"
    # –î–æ–¥–∞–π—Ç–µ —ñ–Ω—à—ñ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    # else:
    #     st.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏: '{current_platform}'. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —è–∫ —î.")
        # platform_for_table_name = current_platform # –∞–±–æ None, —è–∫—â–æ –Ω–µ –∑–Ω–∞—î–º–æ, —â–æ —Ä–æ–±–∏—Ç–∏

    if platform_for_table_name:
        positions_table_for_account = DYNAMIC_POSITION_TABLE_NAME_TEMPLATE.format(
            account_id=current_account_id,
            platform=platform_for_table_name
        )
        
        st.caption(f"–ê–∫–∞—É–Ω—Ç: {current_account_id}, –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {current_platform} (–¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ: {platform_for_table_name}). –û—á—ñ–∫—É–≤–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü—è: `{positions_table_for_account}`")

        if st.session_state.current_positions_table_name != positions_table_for_account or st.session_state.selected_account_positions_df.empty:
            with st.spinner(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ {positions_table_for_account}..."):
                st.session_state.selected_account_positions_df = load_data(positions_table_for_account)
                st.session_state.current_positions_table_name = positions_table_for_account
                if not st.session_state.selected_account_positions_df.empty:
                     st.success(f"–î–∞–Ω—ñ –∑ —Ç–∞–±–ª–∏—Ü—ñ '{positions_table_for_account}' —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ.")
        
        display_position_charts(st.session_state.selected_account_positions_df, st.session_state.current_positions_table_name, current_account_id)
    else:
        st.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ —Ç–∞–±–ª–∏—Ü—ñ –ø–æ–∑–∏—Ü—ñ–π –¥–ª—è –∞–∫–∞—É–Ω—Ç—É {current_account_id} (–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {current_platform}).")

elif not accounts_df_global.empty :
    st.info("üìà –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç –∑ —Ç–∞–±–ª–∏—Ü—ñ –≤–∏—â–µ, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫–∏ –π–æ–≥–æ –ø–æ–∑–∏—Ü—ñ–π.")

st.sidebar.info("""
**–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è:**
1. –û–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç –∑—ñ —Å–ø–∏—Å–∫—É.
2. –ì—Ä–∞—Ñ—ñ–∫–∏ –ø–æ–∑–∏—Ü—ñ–π –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É –≤—ñ–¥–æ–±—Ä–∞–∑—è—Ç—å—Å—è –Ω–∏–∂—á–µ.
""")
if 'db_connection_successful' in st.session_state and not st.session_state.db_connection_successful:
    st.sidebar.error("–ü—Ä–æ–±–ª–µ–º–∞ –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º –¥–æ –ë–î!")

