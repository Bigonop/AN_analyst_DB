import streamlit as st
import pandas as pd
import plotly.express as px

# ---- –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –°–¢–û–†–Ü–ù–ö–ò ----
st.set_page_config(
    page_title="–¢–æ—Ä–≥–æ–≤–∏–π –î–∞—à–±–æ—Ä–¥",
    page_icon="üíπ",
    layout="wide"
)

st.title("üìä –¢–æ—Ä–≥–æ–≤–∏–π –î–∞—à–±–æ—Ä–¥ –∑ Neon DB")

# ---- –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –î–û –ë–ê–ó–ò –î–ê–ù–ò–• ----
@st.cache_resource # –ö–µ—à—É–≤–∞–Ω–Ω—è —Å–∞–º–æ–≥–æ –æ–±'—î–∫—Ç—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
def get_db_connection():
    try:
        # –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –Ω–∞–∑–≤–∞ "neon_db" —Å–ø—ñ–≤–ø–∞–¥–∞—î –∑ —Ç–∏–º, —â–æ —É –≤–∞—Å –≤ Secrets
        # [connections.neon_db]
        conn_obj = st.connection("neon_db", type="sql")
        # –î—Ä—ñ–±–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–µ, —Ä–æ–±–ª—è—á–∏ –ø—Ä–æ—Å—Ç–∏–π –∑–∞–ø–∏—Ç
        conn_obj.query("SELECT 1;")
        st.success("üéâ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö Neon DB —É—Å–ø—ñ—à–Ω–µ!") # –ü–µ—Ä–µ–º—ñ—Å—Ç–∏–º–æ —Å—é–¥–∏, —â–æ–± –±—É–ª–æ –æ–¥–∏–Ω —Ä–∞–∑
        return conn_obj
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
        st.stop() # –ó—É–ø–∏–Ω–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, —è–∫—â–æ –Ω–µ–º–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è

# ---- –§–£–ù–ö–¶–Ü–Ø –î–õ–Ø –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –î–ê–ù–ò–• –ó –ö–ï–®–£–í–ê–ù–ù–Ø–ú ----
# –¢–µ–ø–µ—Ä load_data –±—É–¥–µ –∑–∞–ª–µ–∂–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –≤—ñ–¥ table_name –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è
@st.cache_data(ttl=600) # –ö–µ—à—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –Ω–∞ 10 —Ö–≤–∏–ª–∏–Ω
def load_data(table_name: str): # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ 'connection' –∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
    local_conn = get_db_connection() # –û—Ç—Ä–∏–º—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ
    if not local_conn: # –Ø–∫—â–æ get_db_connection –Ω–µ –≤–¥–∞–ª–æ—Å—è, –≤–æ–Ω–∞ –≤–∏–∫–ª–∏—á–µ st.stop()
        return pd.DataFrame() # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π DataFrame, —Ö–æ—á–∞ –¥–æ —Ü—å–æ–≥–æ –Ω–µ –¥—ñ–π–¥–µ

    try:
        query = f'SELECT * FROM public."{table_name}";'
        df = local_conn.query(query) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        if df.empty:
            st.warning(f"–¢–∞–±–ª–∏—Ü—è 'public.\"{table_name}\"' –ø–æ—Ä–æ–∂–Ω—è –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
            return pd.DataFrame()
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫—Ä–∞—â–µ –≤–∏–Ω–µ—Å—Ç–∏ –∑–∞ –º–µ–∂—ñ –∫–µ—à–æ–≤–∞–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó,
        # —â–æ–± –≤–æ–Ω–æ –ø–æ–∫–∞–∑—É–≤–∞–ª–æ—Å—è —â–æ—Ä–∞–∑—É, –∞ –Ω–µ —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∑ –ë–î.
        # st.success(f"–î–∞–Ω—ñ –∑ —Ç–∞–±–ª–∏—Ü—ñ 'public.\"{table_name}\"' —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ!")
        return df
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∑ —Ç–∞–±–ª–∏—Ü—ñ 'public.\"{table_name}\"': {e}")
        return pd.DataFrame()

# ---- –ù–ê–ó–í–ò –¢–ê–ë–õ–ò–¶–¨ ----
POSITIONS_TABLE_NAME = "11232052_positions_MT5_v2"
ACCOUNTS_TABLE_NAME = "stat_user_account_v2"

# –û—Ç—Ä–∏–º—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –ø–æ—á–∞—Ç–∫—É (–∞–±–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ)
# –¶–µ –≤–∏–∫–ª–∏—á–µ get_db_connection, —è–∫–∞ –ø–æ–∫–∞–∂–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö –∞–±–æ –ø–æ–º–∏–ª–∫—É
# —ñ –ø–æ–≤–µ—Ä–Ω–µ –∫–µ—à–æ–≤–∞–Ω–∏–π –æ–±'—î–∫—Ç. –ú–∏ –π–æ–≥–æ —Ç—É—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞—î–º–æ –¥–∞–ª—ñ, load_data —Å–∞–º–∞ –π–æ–≥–æ –≤—ñ–∑—å–º–µ.
get_db_connection() # –ü—Ä–æ—Å—Ç–æ –≤–∏–∫–ª–∏–∫–∞—î–º–æ, —â–æ–± –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —ñ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è.

# ---- –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –¢–ê –û–ë–†–û–ë–ö–ê –î–ê–ù–ò–• –î–õ–Ø –ì–†–ê–§–Ü–ö–Ü–í –ü–û–ó–ò–¶–Ü–ô ----
st.header(f"–ê–Ω–∞–ª—ñ–∑ –ø–æ–∑–∏—Ü—ñ–π –∑ —Ç–∞–±–ª–∏—Ü—ñ: {POSITIONS_TABLE_NAME}")

positions_df = load_data(POSITIONS_TABLE_NAME) # –¢–µ–ø–µ—Ä –ø–µ—Ä–µ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–∞–∑–≤—É —Ç–∞–±–ª–∏—Ü—ñ

if not positions_df.empty:
    st.success(f"–î–∞–Ω—ñ –∑ —Ç–∞–±–ª–∏—Ü—ñ 'public.\"{POSITIONS_TABLE_NAME}\"' —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω—ñ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è.") # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç—É—Ç
    # –ü–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—è, —â–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏ —ñ—Å–Ω—É—é—Ç—å
    required_cols_positions = ['net_profit_db', 'change_balance_acc', 'time_close']
    if not all(col in positions_df.columns for col in required_cols_positions):
        st.error(f"–í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—ñ '{POSITIONS_TABLE_NAME}'. –ü–æ—Ç—Ä—ñ–±–Ω—ñ: {', '.join(required_cols_positions)}")
    else:
        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö
        positions_df_cleaned = positions_df.copy()
        
        for col in ['net_profit_db', 'change_balance_acc']:
            positions_df_cleaned[col] = pd.to_numeric(positions_df_cleaned[col], errors='coerce')
        
        if 'time_close' in positions_df_cleaned.columns:
            try:
                positions_df_cleaned['time_close'] = pd.to_datetime(positions_df_cleaned['time_close'], errors='coerce')
                positions_df_cleaned.dropna(subset=['net_profit_db', 'change_balance_acc', 'time_close'], inplace=True)
                positions_df_cleaned = positions_df_cleaned.sort_values(by='time_close')
            except Exception as e:
                st.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ –∑ –æ–±—Ä–æ–±–∫–æ—é –∫–æ–ª–æ–Ω–∫–∏ 'time_close': {e}. –ì—Ä–∞—Ñ—ñ–∫–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –Ω–µ—Ç–æ—á–Ω–∏–º–∏.")
                positions_df_cleaned.dropna(subset=['net_profit_db', 'change_balance_acc'], inplace=True)
        else:
            st.warning("–í—ñ–¥—Å—É—Ç–Ω—è –∫–æ–ª–æ–Ω–∫–∞ 'time_close' (–∞–±–æ –ø–æ–¥—ñ–±–Ω–∞) –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —É–≥–æ–¥. –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ—Ç–æ—á–Ω–∏–º.")
            positions_df_cleaned.dropna(subset=['net_profit_db', 'change_balance_acc'], inplace=True)

        if not positions_df_cleaned.empty:
            # --- 1. –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ñ—ñ—Ç ---
            st.subheader("–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ñ—ñ—Ç")
            positions_df_cleaned['cumulative_profit'] = positions_df_cleaned['net_profit_db'].cumsum()
            
            fig_cumulative_profit = px.line(
                positions_df_cleaned,
                x=positions_df_cleaned.index if 'time_close' not in positions_df_cleaned.columns or positions_df_cleaned['time_close'].isnull().all() else 'time_close',
                y='cumulative_profit',
                title="–î–∏–Ω–∞–º—ñ–∫–∞ –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ—Ç—É",
                labels={'cumulative_profit': '–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ñ—ñ—Ç', 'index': '–ù–æ–º–µ—Ä —É–≥–æ–¥–∏', 'time_close': '–ß–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è'}
            )
            fig_cumulative_profit.update_layout(xaxis_title="–ß–∞—Å/–ù–æ–º–µ—Ä —É–≥–æ–¥–∏", yaxis_title="–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ñ—ñ—Ç ($)")
            st.plotly_chart(fig_cumulative_profit, use_container_width=True)

            # --- 2. –ë–∞–ª–∞–Ω—Å (–∑–º—ñ–Ω–∞ –±–∞–ª–∞–Ω—Å—É) ---
            st.subheader("–î–∏–Ω–∞–º—ñ–∫–∞ –∑–º—ñ–Ω–∏ –±–∞–ª–∞–Ω—Å—É (–ø–æ —É–≥–æ–¥–∞—Ö)")
            fig_balance_change = px.line(
                positions_df_cleaned,
                x=positions_df_cleaned.index if 'time_close' not in positions_df_cleaned.columns or positions_df_cleaned['time_close'].isnull().all() else 'time_close',
                y='change_balance_acc',
                title="–î–∏–Ω–∞–º—ñ–∫–∞ –±–∞–ª–∞–Ω—Å—É —Ä–∞—Ö—É–Ω–∫—É",
                labels={'change_balance_acc': '–ë–∞–ª–∞–Ω—Å', 'index': '–ù–æ–º–µ—Ä —É–≥–æ–¥–∏', 'time_close': '–ß–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è'}
            )
            fig_balance_change.update_layout(xaxis_title="–ß–∞—Å/–ù–æ–º–µ—Ä —É–≥–æ–¥–∏", yaxis_title="–ë–∞–ª–∞–Ω—Å —Ä–∞—Ö—É–Ω–∫—É ($)")
            st.plotly_chart(fig_balance_change, use_container_width=True)
        else:
            st.info(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –≤ —Ç–∞–±–ª–∏—Ü—ñ '{POSITIONS_TABLE_NAME}' –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –ø—ñ—Å–ª—è –æ—á–∏—Å—Ç–∫–∏.")
else:
    st.info(f"–î–∞–Ω—ñ –∑ —Ç–∞–±–ª–∏—Ü—ñ '{POSITIONS_TABLE_NAME}' —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –∞–±–æ —Ç–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è.")

st.markdown("---")

# ---- –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –¢–ê –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø –î–ê–ù–ò–• –ü–†–û –ê–ö–ê–£–ù–¢–ò ----
st.header(f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–∫–∞—É–Ω—Ç–∏ –∑ —Ç–∞–±–ª–∏—Ü—ñ: {ACCOUNTS_TABLE_NAME}")

accounts_df = load_data(ACCOUNTS_TABLE_NAME) # –¢–µ–ø–µ—Ä –ø–µ—Ä–µ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–∞–∑–≤—É —Ç–∞–±–ª–∏—Ü—ñ

if not accounts_df.empty:
    st.success(f"–î–∞–Ω—ñ –∑ —Ç–∞–±–ª–∏—Ü—ñ 'public.\"{ACCOUNTS_TABLE_NAME}\"' —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω—ñ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è.") # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç—É—Ç
    columns_to_display = {
        "account_id": "ID –ê–∫–∞—É–Ω—Ç—É", "platform": "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞", "user_id": "ID –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
        "broker_name": "–ë—Ä–æ–∫–µ—Ä", "server": "–°–µ—Ä–≤–µ—Ä", "deposit_currency": "–í–∞–ª—é—Ç–∞ –¥–µ–ø–æ–∑–∏—Ç—É",
        "account_type": "–¢–∏–ø –∞–∫–∞—É–Ω—Ç—É", "account_status": "–°—Ç–∞—Ç—É—Å –∞–∫–∞—É–Ω—Ç—É", "is_active": "–ê–∫—Ç–∏–≤–Ω–∏–π",
        "balance": "–ë–∞–ª–∞–Ω—Å", "initial_deposit": "–ü–æ—á–∞—Ç–∫–æ–≤–∏–π –¥–µ–ø–æ–∑–∏—Ç",
        "total_deposits": "–í—Å—å–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç—ñ–≤", "total_withdrawals": "–í—Å—å–æ–≥–æ –≤–∏–≤–µ–¥–µ–Ω–æ",
        "total_profit": "–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ—Ñ—ñ—Ç"
    }
    
    display_df = accounts_df[[col for col in columns_to_display if col in accounts_df.columns]].copy()
    display_df.rename(columns=columns_to_display, inplace=True)

    currency_columns_keys = ["balance", "initial_deposit", "total_deposits", "total_withdrawals", "total_profit"]
    currency_columns_renamed = [columns_to_display.get(key) for key in currency_columns_keys if columns_to_display.get(key) in display_df.columns]

    for col in currency_columns_renamed:
        display_df[col] = pd.to_numeric(display_df[col], errors='coerce')

    try:
        from st_aggrid import AgGrid, GridOptionsBuilder
        from st_aggrid.shared import GridUpdateMode

        gb = GridOptionsBuilder.from_dataframe(display_df)
        for col_name in currency_columns_renamed:
            gb.configure_column(col_name, type=["numericColumn", "numberColumnFilter", "customNumericFormat"], precision=2, aggFunc='sum')
        
        active_col_renamed = columns_to_display.get("is_active")
        if active_col_renamed and active_col_renamed in display_df.columns:
             gb.configure_column(active_col_renamed, cellRenderer='agBooleanCellRenderer', editable=False, width=100) # –í–∫–∞–∑–∞–≤ —à–∏—Ä–∏–Ω—É

        gb.configure_pagination(paginationAutoPageSize=False, paginationPageSize=10) # –ó–∞–º—ñ—Å—Ç—å AutoPageSize, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏—Ö
        gb.configure_side_bar()
        gb.configure_default_column(editable=False, filter=True, sortable=True, resizable=True, wrapText=True, autoHeight=True) # autoHeight –¥–ª—è —Ç–µ–∫—Å—Ç—É
        
        gridOptions = gb.build()

        st.subheader("–î–µ—Ç–∞–ª—å–Ω–∞ —Ç–∞–±–ª–∏—Ü—è –∞–∫–∞—É–Ω—Ç—ñ–≤ (—ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞)")
        AgGrid(
            display_df,
            gridOptions=gridOptions,
            update_mode=GridUpdateMode.MODEL_CHANGED,
            allow_unsafe_jscode=True,
            height=400, # –ó–º–µ–Ω—à–∏–≤ –≤–∏—Å–æ—Ç—É –¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
            width='100%',
            fit_columns_on_grid_load=False, # –ö—Ä–∞—â–µ False, —è–∫—â–æ –≤—Ä—É—á–Ω—É –Ω–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ
            theme='streamlit' 
        )
    except ImportError:
        st.warning("–î–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ, –±—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å 'streamlit-aggrid' —Ç–∞ –¥–æ–¥–∞–π—Ç–µ –¥–æ requirements.txt.")
        st.info("–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ:")
        st.dataframe(display_df.style.format(subset=currency_columns_renamed, formatter="{:,.2f}").hide(axis="index"))
else:
    st.info(f"–î–∞–Ω—ñ –∑ —Ç–∞–±–ª–∏—Ü—ñ '{ACCOUNTS_TABLE_NAME}' —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –∞–±–æ —Ç–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è.")

st.sidebar.info("–¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏ —á–∏ —ñ–Ω—à—É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é.")

