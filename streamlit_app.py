import streamlit as st
import pandas as pd
import plotly.express as px
# –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ streamlit-aggrid –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —ñ —î –≤ requirements.txt
try:
    from st_aggrid import AgGrid, GridOptionsBuilder, GridUpdateMode, DataReturnMode
except ImportError:
    st.error("–ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ streamlit-aggrid –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–¥–∞–π—Ç–µ 'streamlit-aggrid' –¥–æ requirements.txt —Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –¥–æ–¥–∞—Ç–æ–∫.")
    st.stop()


# ---- –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –°–¢–û–†–Ü–ù–ö–ò ----
st.set_page_config(
    page_title="–¢–æ—Ä–≥–æ–≤–∏–π –î–∞—à–±–æ—Ä–¥",
    page_icon="üíπ",
    layout="wide"
)

st.title("üìä –¢–æ—Ä–≥–æ–≤–∏–π –î–∞—à–±–æ—Ä–¥ –∑ Neon DB")

# ---- –ö–ï–®–£–í–ê–ù–ù–Ø ----
@st.cache_resource
def get_db_connection():
    try:
        conn_obj = st.connection("neon_db", type="sql")
        conn_obj.query("SELECT 1;") # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è
        if 'db_connection_successful' not in st.session_state:
            st.success("üéâ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö Neon DB —É—Å–ø—ñ—à–Ω–µ!")
            st.session_state.db_connection_successful = True
        return conn_obj
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
        st.session_state.db_connection_successful = False
        st.stop()

@st.cache_data(ttl=300) # –ó–º–µ–Ω—à–∏–≤ TTL –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è, –ø–æ—Ç—ñ–º –º–æ–∂–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ 600
def load_data(table_name: str):
    local_conn = get_db_connection()
    if not local_conn:
        return pd.DataFrame()
    try:
        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –∑–∞–ø–∏—Ç—É (–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –º–æ–∂–ª–∏–≤–∏—Ö —Ü–∏—Ñ—Ä –Ω–∞ –ø–æ—á–∞—Ç–∫—É/—Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ñ–≤)
        # –í–∞–∂–ª–∏–≤–æ: PostgreSQL —á—É—Ç–ª–∏–≤–∏–π –¥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É –≤ –Ω–∞–∑–≤–∞—Ö, —è–∫—â–æ –≤–æ–Ω–∏ –Ω–µ –≤–∑—è—Ç—ñ –≤ "".
        # –Ø–∫—â–æ –≤–∞—à—ñ —Ç–∞–±–ª–∏—Ü—ñ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "123_table", —Ç–æ public."123_table"
        # –Ø–∫—â–æ "MyTable", —Ç–æ public."MyTable" (—è–∫—â–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ –≤–µ–ª–∏–∫–æ—ó –ª—ñ—Ç–µ—Ä–∏ –±–µ–∑ –ª–∞–ø–æ–∫, —Ç–æ –∑–±–µ—Ä–µ–∂–µ—Ç—å—Å—è –≤ –Ω–∏–∂–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ)
        # –ù–∞–π–±–µ–∑–ø–µ—á–Ω—ñ—à–µ - –∑–∞–≤–∂–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ç–æ—á–Ω—É –Ω–∞–∑–≤—É, —è–∫ –≤–æ–Ω–∞ —î –≤ –ë–î, —ñ –ø—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ –±—Ä–∞—Ç–∏ –≤ ""
        # –Ø–∫—â–æ –≤ table_name –≤–∂–µ —î public. —Ç–æ –Ω–µ –¥–æ–¥–∞—î–º–æ
        if table_name.lower().startswith("public."):
            query_table_name = f'"{table_name.split(".")[-1]}"' if not table_name.split(".")[-1].replace("_", "").isalnum() or table_name.split(".")[-1][0].isdigit() else table_name.split(".")[-1]
            if not query_table_name.startswith('"'): # –ø–µ—Ä–µ—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –¥–ª—è –ø—Ä—è–º–∏—Ö –Ω–∞–∑–≤
                 query_table_name = f'public.{query_table_name}'
            else: # —è–∫—â–æ –≤–∂–µ –∑ –ª–∞–ø–∫–∞–º–∏, —Ç–æ public. –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ –ø–µ—Ä–µ–¥ –Ω–∏–º–∏ —è–∫—â–æ –≤–æ–Ω–∏ –æ—Ö–æ–ø–ª—é—é—Ç—å –≤—Å—é –Ω–∞–∑–≤—É
                 query_table_name = f'public.{query_table_name}'
        elif not table_name.replace("_", "").isalnum() or table_name[0].isdigit():
             query_table_name = f'public."{table_name}"'
        else:
             query_table_name = f'public.{table_name}' # –î–ª—è –ø—Ä–æ—Å—Ç–∏—Ö –Ω–∞–∑–≤ —Ç–∏–ø—É my_table

        query = f'SELECT * FROM {query_table_name};'
        df = local_conn.query(query)
        if df.empty:
            st.warning(f"–¢–∞–±–ª–∏—Ü—è '{query_table_name}' (–∑–∞–ø–∏—Ç –¥–ª—è '{table_name}') –ø–æ—Ä–æ–∂–Ω—è –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
        return df
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∑ —Ç–∞–±–ª–∏—Ü—ñ '{table_name}' (–∑–∞–ø–∏—Ç: {query_table_name if 'query_table_name' in locals() else '–Ω–µ —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ'}): {e}")
        return pd.DataFrame()

# ---- –ù–ê–ó–í–ò –¢–ê–ë–õ–ò–¶–¨ –¢–ê –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø ----
ACCOUNTS_TABLE_NAME = "stat_user_account_v2"
# –®–∞–±–ª–æ–Ω –¥–ª—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ —Ç–∞–±–ª–∏—Ü—ñ –ø–æ–∑–∏—Ü—ñ–π
DYNAMIC_POSITION_TABLE_NAME_TEMPLATE = "{account_id}_positions_{platform}_v2"

# –°—Ç–∞–Ω –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è
if 'selected_account_id' not in st.session_state:
    st.session_state.selected_account_id = None
if 'selected_account_platform' not in st.session_state: # –î–æ–¥–∞–Ω–æ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏
    st.session_state.selected_account_platform = None
if 'selected_account_positions_df' not in st.session_state:
    st.session_state.selected_account_positions_df = pd.DataFrame()
if 'current_positions_table_name' not in st.session_state:
    st.session_state.current_positions_table_name = ""

# –û—Ç—Ä–∏–º—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –Ω–∞ –ø–æ—á–∞—Ç–∫—É
conn = get_db_connection() # –¶–µ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç—å st.session_state.db_connection_successful

# ---- –§–£–ù–ö–¶–Ü–Ø –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø –ì–†–ê–§–Ü–ö–Ü–í –ü–û–ó–ò–¶–Ü–ô ----
def display_position_charts(positions_df: pd.DataFrame, table_name: str, account_id_display: str):
    if positions_df.empty:
        # st.info(f"–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ '{table_name}'.") # –¶–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ —î –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
        return

    st.header(f"–ê–Ω–∞–ª—ñ–∑ –ø–æ–∑–∏—Ü—ñ–π –¥–ª—è –∞–∫–∞—É–Ω—Ç—É {account_id_display} (—Ç–∞–±–ª–∏—Ü—è: {table_name})") # –î–æ–¥–∞–Ω–æ ID –∞–∫–∞—É–Ω—Ç—É –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫

    required_cols_positions = ['net_profit_db', 'change_balance_acc', 'time_close']
    if not all(col in positions_df.columns for col in required_cols_positions):
        st.error(f"–í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—ñ '{table_name}'. –ü–æ—Ç—Ä—ñ–±–Ω—ñ: {', '.join(required_cols_positions)}")
        return

    positions_df_cleaned = positions_df.copy()
    for col in ['net_profit_db', 'change_balance_acc']:
        positions_df_cleaned[col] = pd.to_numeric(positions_df_cleaned[col], errors='coerce')

    if 'time_close' in positions_df_cleaned.columns:
        try:
            positions_df_cleaned['time_close'] = pd.to_datetime(positions_df_cleaned['time_close'], errors='coerce', unit_or_format='s', origin='unix') # –°–ø—Ä–æ–±—É—î–º–æ –∑ unit='s' —è–∫—â–æ —Ü–µ timestamp
            positions_df_cleaned.dropna(subset=['net_profit_db', 'change_balance_acc', 'time_close'], inplace=True)
            positions_df_cleaned = positions_df_cleaned.sort_values(by='time_close')
        except Exception as e_datetime: # –ë—ñ–ª—å—à –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏ –¥–∞—Ç–∏
            st.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ –∑ –æ–±—Ä–æ–±–∫–æ—é –∫–æ–ª–æ–Ω–∫–∏ 'time_close' (—è–∫ datetime) –¥–ª—è '{table_name}': {e_datetime}.")
            st.info("–°–ø—Ä–æ–±–∞ –æ–±—Ä–æ–±–∏—Ç–∏ 'time_close' —è–∫ —á–∏—Å–ª–æ –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è.")
            try:
                positions_df_cleaned['time_close_numeric'] = pd.to_numeric(positions_df_cleaned['time_close'], errors='coerce')
                positions_df_cleaned.dropna(subset=['net_profit_db', 'change_balance_acc', 'time_close_numeric'], inplace=True)
                positions_df_cleaned = positions_df_cleaned.sort_values(by='time_close_numeric')
                x_axis_data = positions_df_cleaned.index # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ–Ω–¥–µ–∫—Å, —è–∫—â–æ —á–∞—Å –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ —è–∫ –¥–∞—Ç–∞
                x_axis_label = '–ù–æ–º–µ—Ä —É–≥–æ–¥–∏ (–≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–æ –∑–∞ time_close —è–∫ —á–∏—Å–ª–æ)'
            except Exception as e_numeric:
                 st.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ 'time_close' –Ω—ñ —è–∫ –¥–∞—Ç—É, –Ω—ñ —è–∫ —á–∏—Å–ª–æ: {e_numeric}")
                 return # –ù–µ –º–æ–∂–µ–º–æ –±—É–¥—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫–∏
        else: # –Ø–∫—â–æ pd.to_datetime —Å–ø—Ä–∞—Ü—é–≤–∞–ª–æ
            x_axis_data = positions_df_cleaned['time_close']
            x_axis_label = '–ß–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è'

    else: # –Ø–∫—â–æ –Ω–µ–º–∞—î 'time_close'
        st.warning(f"–í—ñ–¥—Å—É—Ç–Ω—è –∫–æ–ª–æ–Ω–∫–∞ 'time_close' –¥–ª—è '{table_name}'. –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ—Ç–æ—á–Ω–∏–º, —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø–æ —ñ–Ω–¥–µ–∫—Å—É.")
        positions_df_cleaned.dropna(subset=['net_profit_db', 'change_balance_acc'], inplace=True)
        x_axis_data = positions_df_cleaned.index
        x_axis_label = '–ù–æ–º–µ—Ä —É–≥–æ–¥–∏'


    if positions_df_cleaned.empty:
        st.info(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –ø—ñ—Å–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è '{table_name}'.")
        return

    # --- 1. –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ñ—ñ—Ç ---
    st.subheader("–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ñ—ñ—Ç")
    positions_df_cleaned['cumulative_profit'] = positions_df_cleaned['net_profit_db'].cumsum()
    fig_cumulative_profit = px.line(
        positions_df_cleaned, x=x_axis_data, y='cumulative_profit', title="–î–∏–Ω–∞–º—ñ–∫–∞ –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ—Ç—É",
        labels={'cumulative_profit': '–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ñ—ñ—Ç', 'index': '–ù–æ–º–µ—Ä —É–≥–æ–¥–∏', 'time_close': x_axis_label}
    )
    fig_cumulative_profit.update_layout(xaxis_title=x_axis_label, yaxis_title="–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ñ—ñ—Ç ($)")
    st.plotly_chart(fig_cumulative_profit, use_container_width=True)

    # --- 2. –ë–∞–ª–∞–Ω—Å ---
    st.subheader("–î–∏–Ω–∞–º—ñ–∫–∞ –±–∞–ª–∞–Ω—Å—É —Ä–∞—Ö—É–Ω–∫—É")
    fig_balance_change = px.line(
        positions_df_cleaned, x=x_axis_data, y='change_balance_acc', title="–î–∏–Ω–∞–º—ñ–∫–∞ –±–∞–ª–∞–Ω—Å—É —Ä–∞—Ö—É–Ω–∫—É",
        labels={'change_balance_acc': '–ë–∞–ª–∞–Ω—Å', 'index': '–ù–æ–º–µ—Ä —É–≥–æ–¥–∏', 'time_close': x_axis_label}
    )
    fig_balance_change.update_layout(xaxis_title=x_axis_label, yaxis_title="–ë–∞–ª–∞–Ω—Å —Ä–∞—Ö—É–Ω–∫—É ($)")
    st.plotly_chart(fig_balance_change, use_container_width=True)


# ---- –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –¢–ê –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø –î–ê–ù–ò–• –ü–†–û –ê–ö–ê–£–ù–¢–ò ----
st.header(f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–∫–∞—É–Ω—Ç–∏ (–∑ —Ç–∞–±–ª–∏—Ü—ñ: {ACCOUNTS_TABLE_NAME})")
# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ accounts_df —Ç—É—Ç, —â–æ–± –≤—ñ–Ω –±—É–≤ –¥–æ—Å—Ç—É–ø–Ω–∏–π –≥–ª–æ–±–∞–ª—å–Ω—ñ—à–µ –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏
accounts_df_global = load_data(ACCOUNTS_TABLE_NAME) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ–Ω—à—É –Ω–∞–∑–≤—É –∑–º—ñ–Ω–Ω–æ—ó

if not accounts_df_global.empty:
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–ª—é—á–æ–≤–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
    required_account_cols = ["account_id", "platform"] # –î–æ–¥–∞—î–º–æ 'platform' –¥–æ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö
    if not all(col in accounts_df_global.columns for col in required_account_cols):
        missing_cols = [col for col in required_account_cols if col not in accounts_df_global.columns]
        st.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: –≤ —Ç–∞–±–ª–∏—Ü—ñ '{ACCOUNTS_TABLE_NAME}' –≤—ñ–¥—Å—É—Ç–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_cols)}. –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –Ω–µ–º–æ–∂–ª–∏–≤–∞.")
        st.stop()
    
    accounts_df_global["account_id"] = accounts_df_global["account_id"].astype(str)
    # –ü–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—å, —â–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Ç–µ–∂ —Ä—è–¥–æ–∫ —ñ –±–µ–∑ –∑–∞–π–≤–∏—Ö –ø—Ä–æ–±—ñ–ª—ñ–≤
    accounts_df_global["platform"] = accounts_df_global["platform"].astype(str).str.strip()


    columns_to_display = {
        "account_id": "ID –ê–∫–∞—É–Ω—Ç—É", "platform": "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞", "user_id": "ID –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
        "broker_name": "–ë—Ä–æ–∫–µ—Ä", "server": "–°–µ—Ä–≤–µ—Ä", "deposit_currency": "–í–∞–ª—é—Ç–∞ –¥–µ–ø–æ–∑–∏—Ç—É",
        "account_type": "–¢–∏–ø –∞–∫–∞—É–Ω—Ç—É", "account_status": "–°—Ç–∞—Ç—É—Å –∞–∫–∞—É–Ω—Ç—É", "is_active": "–ê–∫—Ç–∏–≤–Ω–∏–π",
        "balance": "–ë–∞–ª–∞–Ω—Å", "initial_deposit": "–ü–æ—á–∞—Ç–∫–æ–≤–∏–π –¥–µ–ø–æ–∑–∏—Ç",
        "total_deposits": "–í—Å—å–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç—ñ–≤", "total_withdrawals": "–í—Å—å–æ–≥–æ –≤–∏–≤–µ–¥–µ–Ω–æ",
        "total_profit": "–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ—Ñ—ñ—Ç"
    }
    
    display_df_accounts = accounts_df_global[[col for col in columns_to_display if col in accounts_df_global.columns]].copy()
    display_df_accounts.rename(columns=columns_to_display, inplace=True)

    currency_columns_keys = ["balance", "initial_deposit", "total_deposits", "total_withdrawals", "total_profit"]
    currency_columns_renamed = [columns_to_display.get(key) for key in currency_columns_keys if columns_to_display.get(key) in display_df_accounts.columns]

    for col in currency_columns_renamed:
        display_df_accounts[col] = pd.to_numeric(display_df_accounts[col], errors='coerce')

    gb = GridOptionsBuilder.from_dataframe(display_df_accounts)
    for col_name in currency_columns_renamed:
        gb.configure_column(col_name, type=["numericColumn", "numberColumnFilter", "customNumericFormat"], precision=2, aggFunc='sum')
    
    active_col_renamed = columns_to_display.get("is_active")
    if active_col_renamed and active_col_renamed in display_df_accounts.columns:
         gb.configure_column(active_col_renamed, cellRenderer='agBooleanCellRenderer', editable=False, width=100)

    gb.configure_selection(selection_mode='single', use_checkbox=False)
    gb.configure_pagination(paginationAutoPageSize=False, paginationPageSize=10) # –ú–µ–Ω—à–∏–π —Ä–æ–∑–º—ñ—Ä –¥–ª—è —Ç–µ—Å—Ç—É
    # gb.configure_side_bar() # –ú–æ–∂–Ω–∞ —É–≤—ñ–º–∫–Ω—É—Ç–∏, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    gb.configure_default_column(editable=False, filter=True, sortable=True, resizable=True) # wrapText, autoHeight –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    
    gridOptions = gb.build()

    st.subheader("–û–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–µ—Ç–∞–ª–µ–π –ø–æ–∑–∏—Ü—ñ–π:")
    account_grid_response = AgGrid(
        display_df_accounts, gridOptions=gridOptions, data_return_mode=DataReturnMode.AS_INPUT,
        update_mode=GridUpdateMode.MODEL_CHANGED, allow_unsafe_jscode=True, height=350, # –ó–º–µ–Ω—à–∏–≤ –≤–∏—Å–æ—Ç—É
        width='100%', fit_columns_on_grid_load=True, theme='streamlit' # fit_columns_on_grid_load –º–æ–∂–µ –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω–∏–º
    )
    
    selected_rows = account_grid_response['selected_rows']

    if selected_rows:
        selected_account_id_from_grid = selected_rows[0].get(columns_to_display.get("account_id"))
        selected_platform_from_grid = selected_rows[0].get(columns_to_display.get("platform")) # –û—Ç—Ä–∏–º—É—î–º–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∑ AgGrid

        if selected_account_id_from_grid and selected_platform_from_grid:
            st.session_state.selected_account_id = str(selected_account_id_from_grid)
            st.session_state.selected_account_platform = str(selected_platform_from_grid).strip() # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
        else:
            missing_info = []
            if not selected_account_id_from_grid: missing_info.append("'ID –ê–∫–∞—É–Ω—Ç—É'")
            if not selected_platform_from_grid: missing_info.append("'–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞'")
            st.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ { ' —Ç–∞ '.join(missing_info) } –∑ –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Ä—è–¥–∫–∞.")
            st.session_state.selected_account_id = None
            st.session_state.selected_account_platform = None
else:
    if 'db_connection_successful' in st.session_state and st.session_state.db_connection_successful:
        is_empty_msg = "–ø–æ—Ä–æ–∂–Ω—è –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞" if not accounts_df_global.empty else "–Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏"
        st.info(f"–¢–∞–±–ª–∏—Ü—è –∞–∫–∞—É–Ω—Ç—ñ–≤ '{ACCOUNTS_TABLE_NAME}' {is_empty_msg}. –ù–µ–º–æ–∂–ª–∏–≤–æ –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–∫–∞—É–Ω—Ç—ñ–≤.")
    # –Ø–∫—â–æ –Ω–µ–º–∞—î —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑'—î–¥–Ω–∞–Ω–Ω—è, –ø–æ–º–∏–ª–∫–∞ –≤–∂–µ –≤–∏–≤–µ–¥–µ–Ω–∞ get_db_connection()
    st.session_state.selected_account_id = None
    st.session_state.selected_account_platform = None

st.markdown("---")

# ---- –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø –ì–†–ê–§–Ü–ö–Ü–í –î–õ–Ø –í–ò–ë–†–ê–ù–û–ì–û –ê–ö–ê–£–ù–¢–£ ----
if st.session_state.selected_account_id and st.session_state.selected_account_platform:
    current_account_id = st.session_state.selected_account_id
    current_platform = st.session_state.selected_account_platform
    
    # –í–∞–∂–ª–∏–≤–æ: –æ–±—Ä–æ–±–∫–∞ –Ω–∞–∑–≤–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –Ω–∞–∑–≤—ñ —Ç–∞–±–ª–∏—Ü—ñ
    # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, —è–∫—â–æ –≤ –ë–î –∑–Ω–∞—á–µ–Ω–Ω—è "MetaTrader 5", –∞ –≤ –Ω–∞–∑–≤—ñ —Ç–∞–±–ª–∏—Ü—ñ "MT5"
    # –¢—É—Ç –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è, —è–∫—â–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ.
    # –ü—Ä–∏–ø—É—Å—Ç–∏–º–æ, —â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ –∑ accounts_df –≤–∂–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –Ω–∞–∑–≤–∏ —Ç–∞–±–ª–∏—Ü—ñ.
    # –Ø–∫—â–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–æ–±—ñ–ª–∏ –∞–±–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∏, —è–∫—ñ –Ω–µ –≤—Ö–æ–¥—è—Ç—å –≤ –Ω–∞–∑–≤—É —Ç–∞–±–ª–∏—Ü—ñ, —ó—Ö —Ç—Ä–µ–±–∞ –≤–∏–¥–∞–ª–∏—Ç–∏/–∑–∞–º—ñ–Ω–∏—Ç–∏.
    # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, .replace(" ", "").upper()
    platform_for_table_name = current_platform.replace(" ", "").upper() # –ü—Ä–∏–∫–ª–∞–¥: "MetaTrader 5" -> "METATRADER5"
    # –Ø–∫—â–æ —É –≤–∞—Å –≤ –Ω–∞–∑–≤—ñ —Ç–∞–±–ª–∏—Ü—ñ —Å—Ç—Ä–æ–≥–æ MT5 –∞–±–æ MT4, —Ç–æ –º–æ–∂–Ω–∞ —Ç–∞–∫:
    # if "5" in platform_for_table_name: platform_for_table_name = "MT5"
    # elif "4" in platform_for_table_name: platform_for_table_name = "MT4"
    # else: # ? –ù–µ–≤—ñ–¥–æ–º–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
    #     st.error(f"–ù–µ–≤—ñ–¥–æ–º–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏: {current_platform}. –ù–µ–º–æ–∂–ª–∏–≤–æ —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –Ω–∞–∑–≤—É —Ç–∞–±–ª–∏—Ü—ñ –ø–æ–∑–∏—Ü—ñ–π.")
    #     platform_for_table_name = None # –ê–±–æ —è–∫–µ—Å—å –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º

    # –ù–∞—Ä–∞–∑—ñ, –¥–ª—è –±—ñ–ª—å—à–æ—ó –≥–Ω—É—á–∫–æ—Å—Ç—ñ, –ø—Ä–∏–ø—É—Å—Ç–∏–º–æ, —â–æ platform_for_table_name –≤–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø—ñ—Å–ª—è .replace()...
    # –ê–ë–û, –Ø–ö–©–û –í –ë–î –í –ö–û–õ–û–ù–¶–Ü platform –í–ñ–ï –ó–ù–ê–ß–ï–ù–ù–Ø –¢–ò–ü–£ "MT5", "MT4", –¢–û –ú–û–ñ–ù–ê –ü–†–û–°–¢–û:
    platform_for_table_name = current_platform # –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –∫–æ–ª–æ–Ω—Ü—ñ "platform" –≤–∂–µ –≥–æ—Ç–æ–≤—ñ (MT5, MT4)

    if platform_for_table_name: # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –Ω–∞–∑–≤–∏
        positions_table_for_account = DYNAMIC_POSITION_TABLE_NAME_TEMPLATE.format(
            account_id=current_account_id,
            platform=platform_for_table_name  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–ª–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
        )
        
        st.caption(f"–î–ª—è –∞–∫–∞—É–Ω—Ç—É ID: {current_account_id}, –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {current_platform}. –û—á—ñ–∫—É–≤–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü—è –ø–æ–∑–∏—Ü—ñ–π: `{positions_table_for_account}`") # –î–µ–±–∞–≥

        if st.session_state.current_positions_table_name != positions_table_for_account or st.session_state.selected_account_positions_df.empty:
            with st.spinner(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ {positions_table_for_account}..."):
                st.session_state.selected_account_positions_df = load_data(positions_table_for_account)
                st.session_state.current_positions_table_name = positions_table_for_account
                if not st.session_state.selected_account_positions_df.empty:
                     st.success(f"–î–∞–Ω—ñ –∑ —Ç–∞–±–ª–∏—Ü—ñ '{positions_table_for_account}' —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ.")
        
        display_position_charts(st.session_state.selected_account_positions_df, st.session_state.current_positions_table_name, current_account_id)
    else:
        st.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ —Ç–∞–±–ª–∏—Ü—ñ –ø–æ–∑–∏—Ü—ñ–π –¥–ª—è –∞–∫–∞—É–Ω—Ç—É {current_account_id}.")

elif accounts_df_global.empty and ('db_connection_successful' not in st.session_state or not st.session_state.db_connection_successful) :
    pass # –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∞–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—ñ–≤ –≤–∂–µ –ø–æ–∫–∞–∑–∞–Ω–∞
elif not accounts_df_global.empty: # –ê–∫–∞—É–Ω—Ç–∏ —î, –∞–ª–µ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ
    st.info("üìà –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç –∑ —Ç–∞–±–ª–∏—Ü—ñ –≤–∏—â–µ, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫–∏ –π–æ–≥–æ –ø–æ–∑–∏—Ü—ñ–π.")
# –Ø–∫—â–æ accounts_df_global –ø–æ—Ä–æ–∂–Ω—ñ–π, –∞–ª–µ –∑'—î–¥–Ω–∞–Ω–Ω—è –±—É–ª–æ, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –≤–∏–≤–µ–¥–µ–Ω–æ.

st.sidebar.info("""
**–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è:**
1. –û–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç –∑—ñ —Å–ø–∏—Å–∫—É.
2. –ì—Ä–∞—Ñ—ñ–∫–∏ –ø–æ–∑–∏—Ü—ñ–π –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É –≤—ñ–¥–æ–±—Ä–∞–∑—è—Ç—å—Å—è –Ω–∏–∂—á–µ.
""")
if 'db_connection_successful' in st.session_state and not st.session_state.db_connection_successful:
    st.sidebar.error("–ü—Ä–æ–±–ª–µ–º–∞ –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º –¥–æ –ë–î!")
