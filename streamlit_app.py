import streamlit as st
import pandas as pd
import plotly.express as px
from streamlit_autorefresh import st_autorefresh

try:
    from st_aggrid import AgGrid, GridOptionsBuilder, GridUpdateMode, DataReturnMode
except ImportError:
    st.error("–ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ streamlit-aggrid –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞...")
    AgGrid = None
    st.stop()

# ---- –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –°–¢–û–†–Ü–ù–ö–ò –¢–ê –¢–ï–ú–ò (–ó–∞–ª–∏—à–∞—î–º–æ –≤–∞—à –ø—Ä–∏–∫–ª–∞–¥ —Å—Ç–∏–ª—ñ–≤) ----
st.set_page_config(
    page_title="–¢–æ—Ä–≥–æ–≤–∏–π –î–∞—à–±–æ—Ä–¥ PRO",
    page_icon="üí∞",
    layout="wide",
    initial_sidebar_state="expanded"
)
# ... (–í–∞—à—ñ –∫–∞—Å—Ç–æ–º–Ω—ñ —Å—Ç–∏–ª—ñ st.markdown –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è —Ç—É—Ç) ...
st.markdown("""
<style>
    .main .block-container {padding-top: 2rem; padding-left: 2rem; padding-right: 2rem;}
    h1, h2, h3 {color: #2C3E50;}
    .stMetric {background-color: #ECF0F1; border-radius: 10px; padding: 1rem; border: 1px solid #BDC3C7;}
    .stMetric > label {font-weight: bold; color: #34495E;}
    .stButton>button {background-color: #3498DB; color: white; border-radius: 5px; padding: 0.5rem 1rem; border: none;}
    .stButton>button:hover {background-color: #2980B9;}
</style>
""", unsafe_allow_html=True)


# ---- –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –û–ù–û–í–õ–ï–ù–ù–Ø ----
refresh_interval_seconds = 60
refresh_count = st_autorefresh(interval=refresh_interval_seconds * 1000, limit=None, key="account_refresh")

# ---- –ó–ê–ì–û–õ–û–í–û–ö –¢–ê –°–ê–ô–î–ë–ê–† (–ó–∞–ª–∏—à–∞—î–º–æ –≤–∞—à –ø—Ä–∏–∫–ª–∞–¥) ----
with st.sidebar:
    # st.image("your_logo.png", width=150) # –†–æ–∑–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ —Ç–∞ –∑–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Å–≤–æ—î –ª–æ–≥–æ
    st.header("–§—ñ–ª—å—Ç—Ä–∏ —Ç–∞ –ù–∞–≤—ñ–≥–∞—Ü—ñ—è")
    st.info(f"–¢–æ—Ä–≥–æ–≤–∏–π –î–∞—à–±–æ—Ä–¥ v1.1 (–û–Ω–æ–≤–ª–µ–Ω–Ω—è #{refresh_count})")

st.title("üí∞ –¢–æ—Ä–≥–æ–≤–∏–π –î–∞—à–±–æ—Ä–¥ –∑ Neon DB") # –û–Ω–æ–≤–∏–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
# st.markdown("### –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∞–Ω–∞–ª—ñ—Ç–∏–∫") # –ú–æ–∂–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏, —è–∫—â–æ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è

# ---- –ö–ï–®–£–í–ê–ù–ù–Ø ----
@st.cache_resource
def get_db_connection():
    try:
        conn_obj = st.connection("neon_db", type="sql")
        conn_obj.query("SELECT 1;")
        if 'db_connection_successful' not in st.session_state or not st.session_state.db_connection_successful:
            # st.success("üéâ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö Neon DB —É—Å–ø—ñ—à–Ω–µ!") # –ú–æ–∂–Ω–∞ –ø—Ä–∏–±—Ä–∞—Ç–∏, —â–æ–± –Ω–µ –∑'—è–≤–ª—è–ª–æ—Å—å –ø—Ä–∏ –∫–æ–∂–Ω–æ–º—É —Ä–µ—Ñ—Ä–µ—à—ñ
            st.session_state.db_connection_successful = True
        return conn_obj
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
        # –ù–∞–¥–∞—î–º–æ –±—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –∑ –ø–æ–º–∏–ª–∫–∏, —è–∫—â–æ —Ü–µ InterfaceError
        if "InterfaceError" in str(e) or "e3q8" in str(e):
            st.error("–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏ SQLAlchemy: –°—Ö–æ–∂–µ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É –∑ –¥—Ä–∞–π–≤–µ—Ä–æ–º –ë–î –∞–±–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é `secrets.toml`.")
            st.error(f"–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}") # –ü–æ–∫–∞–∑—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        st.session_state.db_connection_successful = False
        st.stop()

@st.cache_data(ttl=300)
def load_data(table_name: str):
    local_conn = get_db_connection()
    if not local_conn:
        return pd.DataFrame()
    
    query_table_name_for_log = table_name
    try:
        # –õ–æ–≥—ñ–∫–∞ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –∑–∞–ø–∏—Ç—É
        # –û—Å–∫—ñ–ª—å–∫–∏ –Ω–∞–∑–≤–∏ —Ç–∞–±–ª–∏—Ü—å —Ç–µ–ø–µ—Ä —Ñ–æ—Ä–º–∞—Ç—É [account_id]_mt5_data, –≤–æ–Ω–∏ –º–æ–∂—É—Ç—å –º—ñ—Å—Ç–∏—Ç–∏ —Ü–∏—Ñ—Ä–∏ –Ω–∞ –ø–æ—á–∞—Ç–∫—É (–ø—ñ—Å–ª—è account_id_)
        # —ñ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è. PostgreSQL –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –∑–±–µ—Ä—ñ–≥–∞—î –Ω–∞–∑–≤–∏ –≤ –Ω–∏–∂–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ, —è–∫—â–æ –≤–æ–Ω–∏ –Ω–µ –≤–∑—è—Ç—ñ –≤ –ª–∞–ø–∫–∏ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ.
        # –ù–∞–π–±–µ–∑–ø–µ—á–Ω—ñ—à–µ –±—Ä–∞—Ç–∏ –Ω–∞–∑–≤—É —Ç–∞–±–ª–∏—Ü—ñ –≤ –ø–æ–¥–≤—ñ–π–Ω—ñ –ª–∞–ø–∫–∏, —è–∫—â–æ –Ω–µ –≤–ø–µ–≤–Ω–µ–Ω—ñ –≤ —Ä–µ–≥—ñ—Å—Ç—Ä—ñ –∞–±–æ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ñ–≤.
        # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ table_name, —è–∫–∏–π –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è, –≤–∂–µ —î –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é –Ω–∞–∑–≤–æ—é —Ç–∞–±–ª–∏—Ü—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "12345_mt5_data")
        
        # –Ø–∫—â–æ –≤–∞—à–∞ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö —á—É—Ç–ª–∏–≤–∞ –¥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É –Ü –≤–∏ —Å—Ç–≤–æ—Ä—é–≤–∞–ª–∏ —Ç–∞–±–ª–∏—Ü—ñ –∑ –≤–µ–ª–∏–∫–∏–º–∏ –ª—ñ—Ç–µ—Ä–∞–º–∏ (–Ω–∞–ø—Ä. "12345_MT5_data"),
        # —Ç–æ —Ç—Ä–µ–±–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ç–æ—á–Ω–∏–π —Ä–µ–≥—ñ—Å—Ç—Ä. –Ø–∫—â–æ –∂ –Ω—ñ, —Ç–æ PostgreSQL –≤—Å–µ –ø–µ—Ä–µ–≤–µ–¥–µ –≤ –Ω–∏–∂–Ω—ñ–π.
        # –î–ª—è –±–µ–∑–ø–µ–∫–∏, —è–∫—â–æ –Ω–∞–∑–≤–∞ –Ω–µ —î –ø—Ä–æ—Å—Ç–æ—é (—Ç—ñ–ª—å–∫–∏ –±—É–∫–≤–∏, —Ü–∏—Ñ—Ä–∏, –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è, –Ω–µ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ —Ü–∏—Ñ—Ä–∏), –±–µ—Ä–µ–º–æ –≤ –ª–∞–ø–∫–∏.
        
        # –ü—Ä–æ—Å—Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞: —è–∫—â–æ –Ω–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ –º—ñ—Å—Ç–∏—Ç—å —â–æ—Å—å –∫—Ä—ñ–º –±—É–∫–≤, —Ü–∏—Ñ—Ä —Ç–∞ '_', –∞–±–æ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ —Ü–∏—Ñ—Ä–∏,
        # –∞–±–æ —è–∫—â–æ –≤–∏ –ø—Ä–æ—Å—Ç–æ —Ö–æ—á–µ—Ç–µ –±—É—Ç–∏ –≤–ø–µ–≤–Ω–µ–Ω–∏–º–∏, –º–æ–∂–Ω–∞ –≤–∑—è—Ç–∏ –≤ –ª–∞–ø–∫–∏.
        # postgresql –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –Ω–µ –≤–∑—è—Ç—ñ –≤ –ª–∞–ø–∫–∏ —ñ–º–µ–Ω–∞ –≤ –Ω–∏–∂–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä.
        # –Ø–∫—â–æ —Ç–∞–±–ª–∏—Ü—è –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è "12345_mt5_data" (—Å—Ç–≤–æ—Ä–µ–Ω–∞ –±–µ–∑ –ª–∞–ø–æ–∫), —Ç–æ –∑–∞–ø–∏—Ç –¥–æ public.12345_mt5_data –∞–±–æ public."12345_mt5_data" —Å–ø—Ä–∞—Ü—é—î.
        
        # –ú–∏ –±—É–¥–µ–º–æ —Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –Ω–∞–∑–≤—É public."table_name" –¥–ª—è –±—ñ–ª—å—à–æ—ó –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ,
        # —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å public. –Ω–∞ –ø–æ—á–∞—Ç–∫—É
        if table_name.lower().startswith("public."):
             query_table_name = table_name # –í–∂–µ –∑ public, –º–æ–∂–ª–∏–≤–æ –∑ –ª–∞–ø–∫–∞–º–∏
        else:
            # –Ø–∫—â–æ postgresql –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏–≤–æ–¥–∏—Ç—å –¥–æ –Ω–∏–∂–Ω—å–æ–≥–æ —Ä–µ–≥—ñ—Å—Ç—Ä–∞, —Ç–æ —ñ–º–µ–Ω–∞ –º–∏ —Ç–µ–∂ –ø—Ä–∏–≤–æ–¥–∏–º–æ
            # table_name = table_name.lower() # –†–æ–∑–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ, —è–∫—â–æ –≤—Å—ñ –≤–∞—à—ñ —Ç–∞–±–ª–∏—Ü—ñ –≤ –Ω–∏–∂–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ
            query_table_name = f'public."{table_name}"'


        # –ó–∞–ª–∏—à–∏–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è, —â–æ–± –±–∞—á–∏—Ç–∏, —è–∫—É —Ç–∞–±–ª–∏—Ü—é –Ω–∞–º–∞–≥–∞—î–º–æ—Å—å –∑–∞–ø–∏—Ç–∞—Ç–∏
        # st.caption(f"[DEBUG] –ó–∞–ø–∏—Ç –¥–æ —Ç–∞–±–ª–∏—Ü—ñ: {query_table_name}")

        full_query_text = f'SELECT * FROM {query_table_name};'
        df = local_conn.query(full_query_text)
        
        # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—Ä–æ–∂–Ω—é —Ç–∞–±–ª–∏—Ü—é —Ç—É—Ç, —â–æ–± –Ω–µ —Å–ø–∞–º–∏—Ç–∏ –ø—Ä–∏ –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ
        return df
    except Exception as e:
        # –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ —á–µ—Ä–µ–∑ —Ç–µ, —â–æ —Ç–∞–±–ª–∏—Ü—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ (—Ü–µ —Ç–∏–ø–æ–≤–æ –¥–ª—è ProgrammingError –≤ psycopg2/sqlalchemy)
        # (psycopg2.errors.UndefinedTable): relation "public.some_table" does not exist
        if "UndefinedTable" in str(e) or "does not exist" in str(e) or "relation" in str(e) and "does not exist" in str(e):
            st.warning(f"–¢–∞–±–ª–∏—Ü—è '{query_table_name if 'query_table_name' in locals() else table_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.")
        else:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∑ '{query_table_name_for_log}' (—Å–ø—Ä–æ–±–∞ –∑–∞–ø–∏—Ç—É –¥–æ '{query_table_name if 'query_table_name' in locals() else table_name}'): {e}")
        return pd.DataFrame()

# ---- –ù–ê–ó–í–ò –¢–ê–ë–õ–ò–¶–¨ –¢–ê –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø ----
ACCOUNTS_TABLE_NAME = "stat_user_account_v2" # –ó–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω (—è–∫—â–æ —Ü–µ —Ç–∞–∫)
# –ù–û–í–ò–ô –®–ê–ë–õ–û–ù –¥–ª—è —Ç–∞–±–ª–∏—Ü—å –ø–æ–∑–∏—Ü—ñ–π:
# –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ (mt5/mt4) –±—É–¥–µ –≤—ñ–¥–æ–º–∞ –∑ –¥–∞–Ω–∏—Ö –≥–æ–ª–æ–≤–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ –∞–∫–∞—É–Ω—Ç—ñ–≤
# –∞–±–æ –≤–∏ –º–æ–∂–µ—Ç–µ –º–∞—Ç–∏ –æ–∫—Ä–µ–º—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è MT5 —ñ MT4, —è–∫—â–æ –ª–æ–≥—ñ–∫–∞ —Å–∏–ª—å–Ω–æ –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è
DYNAMIC_POSITION_TABLE_NAME_TEMPLATE = "{account_id}_{platform_suffix}_data" # platform_suffix –±—É–¥–µ 'mt5' –∞–±–æ 'mt4'

if 'selected_account_id' not in st.session_state:
    st.session_state.selected_account_id = None
if 'selected_account_platform_suffix' not in st.session_state: # –ó–º—ñ–Ω–µ–Ω–æ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –ª–æ–≥—ñ–∫–∏
    st.session_state.selected_account_platform_suffix = None
if 'selected_account_positions_df' not in st.session_state:
    st.session_state.selected_account_positions_df = pd.DataFrame()
if 'current_positions_table_name' not in st.session_state:
    st.session_state.current_positions_table_name = ""

conn = get_db_connection()

# ---- –§–£–ù–ö–¶–Ü–Ø –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø –ì–†–ê–§–Ü–ö–Ü–í –ü–û–ó–ò–¶–Ü–ô (–±–µ–∑ —Å—É—Ç—Ç—î–≤–∏—Ö –∑–º—ñ–Ω, –∞–ª–µ —É–≤–∞–≥–∞ –¥–æ –∫–æ–ª–æ–Ω–æ–∫) ----
def display_position_charts(positions_df: pd.DataFrame, table_name: str, account_id_display: str):
    if positions_df.empty:
        return

    st.header(f"–ê–Ω–∞–ª—ñ–∑ –ø–æ–∑–∏—Ü—ñ–π –¥–ª—è –∞–∫–∞—É–Ω—Ç—É {account_id_display} (–∑ —Ç–∞–±–ª–∏—Ü—ñ: {table_name})")

    # –í–ê–ñ–õ–ò–í–û: –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –Ω–∞–∑–≤–∏ –∫–æ–ª–æ–Ω–æ–∫ 'net_profit_db', 'change_balance_acc', 'time_close'
    # –∑–∞–ª–∏—à–∏–ª–∏—Å—è —Ç–∞–∫–∏–º–∏ –∂ —É –Ω–æ–≤–∏—Ö —Ç–∞–±–ª–∏—Ü—è—Ö  `_mt5_data` / `_mt4_data`
    required_cols_positions = ['net_profit_db', 'change_balance_acc', 'time_close'] # –ê–ë–û –Ø–ö –í–û–ù–ò –¢–ï–ü–ï–† –ù–ê–ó–ò–í–ê–Æ–¢–¨–°–Ø
    
    missing_required_cols = [col for col in required_cols_positions if col not in positions_df.columns]
    if missing_required_cols:
        st.error(f"–£ —Ç–∞–±–ª–∏—Ü—ñ '{table_name}' –≤—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤: {', '.join(missing_required_cols)}. "
                 f"–ù–∞—è–≤–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏: {positions_df.columns.tolist()}")
        return

    # ... (—Ä–µ—à—Ç–∞ –ª–æ–≥—ñ–∫–∏ display_position_charts –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è —Ç–∞–∫–æ—é –∂, —è–∫ —Ä–∞–Ω—ñ—à–µ,
    #      –∑–∞ —É–º–æ–≤–∏, —â–æ –Ω–∞–∑–≤–∏ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ —ñ –∫–æ–ª–æ–Ω–∫–∏ —á–∞—Å—É –Ω–µ –∑–º—ñ–Ω–∏–ª–∏—Å—è)
    positions_df_cleaned = positions_df.copy()
    for col in ['net_profit_db', 'change_balance_acc']: # –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ü—ñ –Ω–∞–∑–≤–∏!
        positions_df_cleaned[col] = pd.to_numeric(positions_df_cleaned[col], errors='coerce')

    x_axis_data = positions_df_cleaned.index
    x_axis_label = '–ù–æ–º–µ—Ä —É–≥–æ–¥–∏'

    if 'time_close' in positions_df_cleaned.columns: # –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ü—é –Ω–∞–∑–≤—É!
        try:
            temp_time_close = pd.to_datetime(positions_df_cleaned['time_close'], errors='coerce')
            if temp_time_close.isnull().all():
                temp_time_close = pd.to_datetime(positions_df_cleaned['time_close'], unit='s', origin='unix', errors='coerce')
            
            if not temp_time_close.isnull().all():
                positions_df_cleaned['time_close_dt'] = temp_time_close
                positions_df_cleaned.dropna(subset=['net_profit_db', 'change_balance_acc', 'time_close_dt'], inplace=True)
                if not positions_df_cleaned.empty:
                    positions_df_cleaned = positions_df_cleaned.sort_values(by='time_close_dt')
                    x_axis_data = positions_df_cleaned['time_close_dt']
                    x_axis_label = '–ß–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è'
                else:
                    positions_df_cleaned = positions_df.copy() 
                    for col_num in ['net_profit_db', 'change_balance_acc']:
                        positions_df_cleaned[col_num] = pd.to_numeric(positions_df_cleaned[col_num], errors='coerce')
                    st.warning(f"–û–±—Ä–æ–±–∫–∞ 'time_close' —è–∫ –¥–∞—Ç–∏ –ø—Ä–∏–∑–≤–µ–ª–∞ –¥–æ –ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç—É –¥–ª—è '{table_name}'. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ —ñ–Ω–¥–µ–∫—Å–æ–º.")
                    positions_df_cleaned.dropna(subset=['net_profit_db', 'change_balance_acc'], inplace=True)

            elif positions_df_cleaned['time_close'].notna().any():
                try:
                    positions_df_cleaned['time_close_numeric'] = pd.to_numeric(positions_df_cleaned['time_close'], errors='coerce')
                    positions_df_cleaned.dropna(subset=['net_profit_db', 'change_balance_acc', 'time_close_numeric'], inplace=True)
                    if not positions_df_cleaned.empty:
                        positions_df_cleaned = positions_df_cleaned.sort_values(by='time_close_numeric')
                        x_axis_data = positions_df_cleaned.index 
                        x_axis_label = '–ù–æ–º–µ—Ä —É–≥–æ–¥–∏ (–í—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–æ –∑–∞ —á–∏—Å–ª–æ–≤–∏–º time_close)'
                except Exception as e_numeric:
                     st.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ 'time_close' –Ω—ñ —è–∫ –¥–∞—Ç—É/—á–∞—Å, –Ω—ñ —è–∫ —á–∏—Å–ª–æ: {e_numeric}")
                     return
            else:
                 positions_df_cleaned.dropna(subset=['net_profit_db', 'change_balance_acc'], inplace=True)
        except Exception as e_datetime:
            st.warning(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ 'time_close' –¥–ª—è '{table_name}': {e_datetime}. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ —ñ–Ω–¥–µ–∫—Å–æ–º.")
            positions_df_cleaned.dropna(subset=['net_profit_db', 'change_balance_acc'], inplace=True)
    else:
        positions_df_cleaned.dropna(subset=['net_profit_db', 'change_balance_acc'], inplace=True)

    if positions_df_cleaned.empty:
        st.info(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ '{table_name}' –ø—ñ—Å–ª—è –æ—á–∏—Å—Ç–∫–∏.")
        return

    st.subheader("–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ñ—ñ—Ç")
    positions_df_cleaned['cumulative_profit'] = positions_df_cleaned['net_profit_db'].cumsum()
    fig_cumulative_profit = px.line(
        positions_df_cleaned, x=x_axis_data, y='cumulative_profit', title="–î–∏–Ω–∞–º—ñ–∫–∞ –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ—Ç—É",
        labels={'cumulative_profit': '–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ñ—ñ—Ç', (x_axis_data.name if hasattr(x_axis_data, 'name') and x_axis_data.name else 'index'): x_axis_label }
    )
    fig_cumulative_profit.update_layout(xaxis_title=x_axis_label, yaxis_title="–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ñ—ñ—Ç ($)")
    st.plotly_chart(fig_cumulative_profit, use_container_width=True)

    st.subheader("–î–∏–Ω–∞–º—ñ–∫–∞ –±–∞–ª–∞–Ω—Å—É —Ä–∞—Ö—É–Ω–∫—É")
    # –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ 'change_balance_acc' –≤—Å–µ —â–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞ –Ω–∞–∑–≤–∞ –∫–æ–ª–æ–Ω–∫–∏
    fig_balance_change = px.line(
        positions_df_cleaned, x=x_axis_data, y='change_balance_acc', title="–î–∏–Ω–∞–º—ñ–∫–∞ –±–∞–ª–∞–Ω—Å—É —Ä–∞—Ö—É–Ω–∫—É",
        labels={'change_balance_acc': '–ë–∞–ª–∞–Ω—Å', (x_axis_data.name if hasattr(x_axis_data, 'name') and x_axis_data.name else 'index'): x_axis_label}
    )
    fig_balance_change.update_layout(xaxis_title=x_axis_label, yaxis_title="–ë–∞–ª–∞–Ω—Å —Ä–∞—Ö—É–Ω–∫—É ($)")
    st.plotly_chart(fig_balance_change, use_container_width=True)


# ---- –í–ö–õ–ê–î–ö–ò –î–õ–Ø –ù–ê–í–Ü–ì–ê–¶–Ü–á ----
tab_overview, tab_accounts, tab_positions = st.tabs([
    "üìä –ó–∞–≥–∞–ª—å–Ω–∏–π –û–≥–ª—è–¥",
    "üë§ –ê–∫–∞—É–Ω—Ç–∏",
    "üìà –î–µ—Ç–∞–ª—ñ –ü–æ–∑–∏—Ü—ñ–π"
])

with tab_overview:
    st.header("–ö–ª—é—á–æ–≤—ñ –ü–æ–∫–∞–∑–Ω–∏–∫–∏ (–ó–∞–≥–ª—É—à–∫–∞)")
    # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∞–≥—Ä–µ–≥–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –ø–æ –≤—Å—ñ—Ö –∞–∫–∞—É–Ω—Ç–∞—Ö, —è–∫—â–æ —î
    st.info("–¶—è –≤–∫–ª–∞–¥–∫–∞ –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –æ–≥–ª—è–¥—É. –ù–∞—Ä–∞–∑—ñ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.")

with tab_accounts:
    st.header(f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–∫–∞—É–Ω—Ç–∏ (–∑ —Ç–∞–±–ª–∏—Ü—ñ: {ACCOUNTS_TABLE_NAME})")
    accounts_df_global = load_data(ACCOUNTS_TABLE_NAME)

    if not accounts_df_global.empty:
        # –í–ê–ñ–õ–ò–í–û: –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ —î –≤ `accounts_df_global` –∫–æ–ª–æ–Ω–∫–∞,
        # —è–∫–∞ –≤–∫–∞–∑—É—î –Ω–∞ —Ç–∏–ø –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ (MT5/MT4), —â–æ–± —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ `platform_suffix`
        # –ü—Ä–∏–ø—É—Å—Ç–∏–º–æ, —â–æ –∫–æ–ª–æ–Ω–∫–∞ `platform` –≤—Å–µ —â–µ —ñ—Å–Ω—É—î —ñ –º—ñ—Å—Ç–∏—Ç—å "MT5" –∞–±–æ "MT4" –∞–±–æ —Å—Ö–æ–∂—ñ –∑–Ω–∞—á–µ–Ω–Ω—è.
        required_account_cols = ["account_id", "platform"] # 'platform' –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å—É—Ñ—ñ–∫—Å–∞
        if not all(col in accounts_df_global.columns for col in required_account_cols):
            missing_cols = [col for col in required_account_cols if col not in accounts_df_global.columns]
            st.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: –≤ —Ç–∞–±–ª–∏—Ü—ñ '{ACCOUNTS_TABLE_NAME}' –≤—ñ–¥—Å—É—Ç–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_cols)}.")
        else:
            accounts_df_global["account_id"] = accounts_df_global["account_id"].astype(str).str.strip()
            accounts_df_global["platform_original"] = accounts_df_global["platform"].astype(str).str.strip() # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª

            # –õ–æ–≥—ñ–∫–∞ –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è platform_suffix (mt5, mt4)
            def get_platform_suffix(platform_value):
                platform_val_lower = platform_value.lower()
                if "mt5" in platform_val_lower or "metatrader 5" in platform_val_lower:
                    return "mt5"
                elif "mt4" in platform_val_lower or "metatrader 4" in platform_val_lower:
                    return "mt4"
                return None # –ê–±–æ —è–∫–µ—Å—å –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º / –ø–æ–º–∏–ª–∫–∞

            accounts_df_global["platform_suffix_for_table"] = accounts_df_global["platform_original"].apply(get_platform_suffix)
            
            # –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤—É—î–º–æ –∞–∫–∞—É–Ω—Ç–∏, –¥–ª—è —è–∫–∏—Ö –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Å—É—Ñ—ñ–∫—Å, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            accounts_to_display_df = accounts_df_global.dropna(subset=["platform_suffix_for_table"])
            if accounts_to_display_df.empty and not accounts_df_global.empty :
                 st.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Å—É—Ñ—ñ–∫—Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ (mt5/mt4) –¥–ª—è –∂–æ–¥–Ω–æ–≥–æ –∑ –∞–∫–∞—É–Ω—Ç—ñ–≤. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –∫–æ–ª–æ–Ω—Ü—ñ 'platform'.")


            columns_to_display_config = { # –¢–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ platform_original –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                "account_id": "ID –ê–∫–∞—É–Ω—Ç—É", "platform_original": "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞", "user_id": "ID –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
                "broker_name": "–ë—Ä–æ–∫–µ—Ä", "server": "–°–µ—Ä–≤–µ—Ä", "deposit_currency": "–í–∞–ª—é—Ç–∞ –¥–µ–ø–æ–∑–∏—Ç—É",
                "account_type": "–¢–∏–ø –∞–∫–∞—É–Ω—Ç—É", "account_status": "–°—Ç–∞—Ç—É—Å –∞–∫–∞—É–Ω—Ç—É", "is_active": "–ê–∫—Ç–∏–≤–Ω–∏–π",
                "balance": "–ë–∞–ª–∞–Ω—Å", "initial_deposit": "–ü–æ—á–∞—Ç–∫–æ–≤–∏–π –¥–µ–ø–æ–∑–∏—Ç",
                "total_deposits": "–í—Å—å–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç—ñ–≤", "total_withdrawals": "–í—Å—å–æ–≥–æ –≤–∏–≤–µ–¥–µ–Ω–æ",
                "total_profit": "–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ—Ñ—ñ—Ç"
                # "platform_suffix_for_table": "–°—É—Ñ—ñ–∫—Å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ" # –î–ª—è –¥–µ–±–∞–≥—É –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏
            }
            
            existing_display_cols_keys = [k for k, v in columns_to_display_config.items() if k in accounts_to_display_df.columns]
            display_df_aggrid = accounts_to_display_df[existing_display_cols_keys].copy()
            display_df_aggrid.rename(columns=columns_to_display_config, inplace=True)

            # ... (—Ä–µ—à—Ç–∞ –∫–æ–¥—É –¥–ª—è AgGrid, —è–∫ —Ä–∞–Ω—ñ—à–µ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ display_df_aggrid)
            if AgGrid and not display_df_aggrid.empty:
                gb = GridOptionsBuilder.from_dataframe(display_df_aggrid)
                # ... (–∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∫–æ–ª–æ–Ω–æ–∫)
                currency_columns_keys = ["balance", "initial_deposit", "total_deposits", "total_withdrawals", "total_profit"]
                currency_columns_renamed = [columns_to_display_config.get(key) for key in currency_columns_keys if columns_to_display_config.get(key) in display_df_aggrid.columns]

                for col_name in currency_columns_renamed:
                    if col_name in display_df_aggrid.columns:
                        gb.configure_column(col_name, type=["numericColumn", "numberColumnFilter", "customNumericFormat"], precision=2, aggFunc='sum')
                
                active_col_renamed = columns_to_display_config.get("is_active")
                if active_col_renamed and active_col_renamed in display_df_aggrid.columns:
                    gb.configure_column(active_col_renamed, cellRenderer='agBooleanCellRenderer', editable=False, width=100)

                gb.configure_selection(selection_mode='single', use_checkbox=False)
                gb.configure_pagination(paginationAutoPageSize=False, paginationPageSize=10)
                gb.configure_default_column(editable=False, filter=True, sortable=True, resizable=True)
                gridOptions = gb.build()

                st.subheader("–û–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–µ—Ç–∞–ª–µ–π –ø–æ–∑–∏—Ü—ñ–π:")
                account_grid_response = AgGrid(
                    display_df_aggrid, gridOptions=gridOptions, data_return_mode=DataReturnMode.AS_INPUT,
                    update_mode=GridUpdateMode.MODEL_CHANGED, allow_unsafe_jscode=True, height=350,
                    width='100%', fit_columns_on_grid_load=True, theme='streamlit',
                    key=f"aggrid_accounts_{refresh_count}"
                )
                
                selected_rows_df = account_grid_response.get('selected_rows')

                if selected_rows_df is not None and not selected_rows_df.empty:
                    first_selected_row_series = selected_rows_df.iloc[0] # –¶–µ Series –∑ –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Ä—è–¥–∫–∞ AgGrid
                    
                    # –û—Ç—Ä–∏–º—É—î–º–æ ID –∞–∫–∞—É–Ω—Ç—É –∑ AgGrid (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤–∞–Ω—É –Ω–∞–∑–≤—É –∫–æ–ª–æ–Ω–∫–∏)
                    selected_account_id_from_grid = first_selected_row_series.get(columns_to_display_config.get("account_id"))
                    
                    # –í–ê–ñ–õ–ò–í–û: —Ç–µ–ø–µ—Ä –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–µ–Ω `platform_suffix_for_table` –¥–ª—è —Ü—å–æ–≥–æ account_id
                    # –ú–∏ –ø–æ–≤–∏–Ω–Ω—ñ –∑–Ω–∞–π—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ä—è–¥–æ–∫ –≤ `accounts_to_display_df` (–ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è–º)
                    original_account_data = accounts_to_display_df[accounts_to_display_df["account_id"] == str(selected_account_id_from_grid)]
                    
                    if not original_account_data.empty:
                        selected_platform_suffix_for_table = original_account_data.iloc[0]["platform_suffix_for_table"]
                        
                        if selected_account_id_from_grid is not None and selected_platform_suffix_for_table is not None:
                            if (st.session_state.selected_account_id != str(selected_account_id_from_grid) or
                                st.session_state.selected_account_platform_suffix != selected_platform_suffix_for_table):
                                st.session_state.selected_account_id = str(selected_account_id_from_grid)
                                st.session_state.selected_account_platform_suffix = selected_platform_suffix_for_table
                                st.session_state.selected_account_positions_df = pd.DataFrame()
                                st.session_state.current_positions_table_name = ""
                                # st.rerun() # –ú–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏, —â–æ–± –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –ø–æ–∑–∏—Ü—ñ–π, —è–∫—â–æ –±–∞–∂–∞–Ω–æ
                                st.success(f"–ê–∫–∞—É–Ω—Ç {st.session_state.selected_account_id} ({st.session_state.selected_account_platform_suffix}) –≤–∏–±—Ä–∞–Ω–æ. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–î–µ—Ç–∞–ª—ñ –ü–æ–∑–∏—Ü—ñ–π'.")

                    else:
                        st.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–∞–Ω—ñ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É.")
            elif not AgGrid:
                 st.dataframe(display_df_aggrid)
            elif display_df_aggrid.empty and not accounts_df_global.empty:
                 st.info("–ù–µ–º–∞—î –∞–∫–∞—É–Ω—Ç—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ñ.")


    elif 'db_connection_successful' in st.session_state and st.session_state.db_connection_successful:
        st.info(f"–¢–∞–±–ª–∏—Ü—è –∞–∫–∞—É–Ω—Ç—ñ–≤ '{ACCOUNTS_TABLE_NAME}' –ø–æ—Ä–æ–∂–Ω—è –∞–±–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏. –û–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ {refresh_interval_seconds} —Å–µ–∫.")
        st.session_state.selected_account_id = None
        st.session_state.selected_account_platform_suffix = None
        st.session_state.selected_account_positions_df = pd.DataFrame()
        st.session_state.current_positions_table_name = ""

with tab_positions:
    st.header("–ê–Ω–∞–ª—ñ–∑ –ø–æ–∑–∏—Ü—ñ–π –≤–∏–±—Ä–∞–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É")
    if st.session_state.selected_account_id and st.session_state.selected_account_platform_suffix:
        current_account_id = st.session_state.selected_account_id
        current_platform_suffix = st.session_state.selected_account_platform_suffix
        
        positions_table_for_account = DYNAMIC_POSITION_TABLE_NAME_TEMPLATE.format(
            account_id=current_account_id,
            platform_suffix=current_platform_suffix # —Ç–µ–ø–µ—Ä —Ü–µ 'mt5' –∞–±–æ 'mt4'
        )
        
        st.caption(f"–ê–∫–∞—É–Ω—Ç: {current_account_id} (–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {current_platform_suffix}). "
                   f"–û—á—ñ–∫—É–≤–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü—è –ø–æ–∑–∏—Ü—ñ–π: `{positions_table_for_account}`")

        if st.session_state.current_positions_table_name != positions_table_for_account or st.session_state.selected_account_positions_df.empty:
            with st.spinner(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –∑ {positions_table_for_account}..."):
                st.session_state.selected_account_positions_df = load_data(positions_table_for_account)
                st.session_state.current_positions_table_name = positions_table_for_account
                if not st.session_state.selected_account_positions_df.empty:
                     st.success(f"–î–∞–Ω—ñ –ø–æ–∑–∏—Ü—ñ–π –∑ '{positions_table_for_account}' —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ.")
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ç–∞–±–ª–∏—Ü—è —ñ—Å–Ω—É—î, –≤–∂–µ —î –≤ load_data
        
        display_position_charts(st.session_state.selected_account_positions_df, st.session_state.current_positions_table_name, current_account_id)
    else:
        st.info("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç –Ω–∞ –≤–∫–ª–∞–¥—Ü—ñ '–ê–∫–∞—É–Ω—Ç–∏', —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –¥–µ—Ç–∞–ª—ñ –ø–æ–∑–∏—Ü—ñ–π.")

# ---- –ü—ñ–¥–≤–∞–ª ----
st.markdown("---")
st.markdown("¬© 2024 –í–∞—à –¢–æ—Ä–≥–æ–≤–∏–π –î–∞—à–±–æ—Ä–¥.")
