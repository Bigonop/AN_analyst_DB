import streamlit as st
import pandas as pd
import plotly.express as px # –ë—É–¥–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–∏—Ö –≥—Ä–∞—Ñ—ñ–∫—ñ–≤

# ---- –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –°–¢–û–†–Ü–ù–ö–ò ----
st.set_page_config(
    page_title="–¢–æ—Ä–≥–æ–≤–∏–π –î–∞—à–±–æ—Ä–¥",
    page_icon="üíπ",
    layout="wide"
)

st.title("üìä –¢–æ—Ä–≥–æ–≤–∏–π –î–∞—à–±–æ—Ä–¥ –∑ Neon DB")

# ---- –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –î–û –ë–ê–ó–ò –î–ê–ù–ò–• ----
@st.cache_resource # –ö–µ—à—É–≤–∞–Ω–Ω—è —Å–∞–º–æ–≥–æ –æ–±'—î–∫—Ç—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
def get_db_connection():
    try:
        conn = st.connection("neon_db", type="sql")
        # –ü—Ä–æ—Å—Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        conn.query("SELECT 1;")
        return conn
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
        st.stop()

conn = get_db_connection()
if conn:
    st.success("üéâ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö Neon DB —É—Å–ø—ñ—à–Ω–µ!")


# ---- –§–£–ù–ö–¶–Ü–Ø –î–õ–Ø –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –î–ê–ù–ò–• –ó –ö–ï–®–£–í–ê–ù–ù–Ø–ú ----
@st.cache_data(ttl=600) # –ö–µ—à—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –Ω–∞ 10 —Ö–≤–∏–ª–∏–Ω
def load_data(table_name, connection):
    try:
        query = f'SELECT * FROM public."{table_name}";' # –í–∑—è–ª–∏ –Ω–∞–∑–≤—É —Ç–∞–±–ª–∏—Ü—ñ –≤ –ø–æ–¥–≤—ñ–π–Ω—ñ –ª–∞–ø–∫–∏
        df = connection.query(query)
        if df.empty:
            st.warning(f"–¢–∞–±–ª–∏—Ü—è 'public.\"{table_name}\"' –ø–æ—Ä–æ–∂–Ω—è –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
            return pd.DataFrame()
        st.success(f"–î–∞–Ω—ñ –∑ —Ç–∞–±–ª–∏—Ü—ñ 'public.\"{table_name}\"' —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ!")
        return df
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∑ —Ç–∞–±–ª–∏—Ü—ñ 'public.\"{table_name}\"': {e}")
        return pd.DataFrame()

# ---- –ù–ê–ó–í–ò –¢–ê–ë–õ–ò–¶–¨ ----
POSITIONS_TABLE_NAME = "11232052_positions_MT5_v2"
ACCOUNTS_TABLE_NAME = "stat_user_account_v2"

# ---- –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –¢–ê –û–ë–†–û–ë–ö–ê –î–ê–ù–ò–• –î–õ–Ø –ì–†–ê–§–Ü–ö–Ü–í –ü–û–ó–ò–¶–Ü–ô ----
st.header(f"–ê–Ω–∞–ª—ñ–∑ –ø–æ–∑–∏—Ü—ñ–π –∑ —Ç–∞–±–ª–∏—Ü—ñ: {POSITIONS_TABLE_NAME}")

positions_df = load_data(POSITIONS_TABLE_NAME, conn)

if not positions_df.empty:
    # –ü–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—è, —â–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏ —ñ—Å–Ω—É—é—Ç—å
    required_cols_positions = ['net_profit_db', 'change_balance_acc', 'time_close'] # –î–æ–¥–∞—î–º–æ 'time_close' –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
    if not all(col in positions_df.columns for col in required_cols_positions):
        st.error(f"–í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—ñ '{POSITIONS_TABLE_NAME}'. –ü–æ—Ç—Ä—ñ–±–Ω—ñ: {', '.join(required_cols_positions)}")
    else:
        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö
        positions_df_cleaned = positions_df.copy()
        
        # –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–∏—Å–ª–æ–≤–∏—Ö –∫–æ–ª–æ–Ω–æ–∫, –æ–±—Ä–æ–±–∫–∞ –º–æ–∂–ª–∏–≤–∏—Ö –ø–æ–º–∏–ª–æ–∫
        for col in ['net_profit_db', 'change_balance_acc']:
            positions_df_cleaned[col] = pd.to_numeric(positions_df_cleaned[col], errors='coerce')
        
        # –û–±—Ä–æ–±–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ –¥–∞—Ç–∏/—á–∞—Å—É (–í–ê–ñ–õ–ò–í–û: –ø–æ—Ç—Ä—ñ–±–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —É–≥–æ–¥ –ø–æ —á–∞—Å—É!)
        # –Ø–∫—â–æ —É –≤–∞—Å —î –∫–æ–ª–æ–Ω–∫–∞ —Ç–∏–ø—É 'time_create', 'time_update' –∞–±–æ 'time_close', –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —ó—ó
        # –ü—Ä–∏–ø—É—Å—Ç–∏–º–æ, —â–æ —î –∫–æ–ª–æ–Ω–∫–∞ 'time_close' –¥–ª—è —á–∞—Å—É –∑–∞–∫—Ä–∏—Ç—Ç—è —É–≥–æ–¥–∏
        if 'time_close' in positions_df_cleaned.columns:
            try:
                positions_df_cleaned['time_close'] = pd.to_datetime(positions_df_cleaned['time_close'], errors='coerce')
                # –í–∏–¥–∞–ª—è—î–º–æ —Ä—è–¥–∫–∏, –¥–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –¥–∞—Ç—É/—á–∞—Å –∞–±–æ —á–∏—Å–ª–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
                positions_df_cleaned.dropna(subset=['net_profit_db', 'change_balance_acc', 'time_close'], inplace=True)
                # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ —á–∞—Å–æ–º –∑–∞–∫—Ä–∏—Ç—Ç—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫—É
                positions_df_cleaned = positions_df_cleaned.sort_values(by='time_close')
            except Exception as e:
                st.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ –∑ –æ–±—Ä–æ–±–∫–æ—é –∫–æ–ª–æ–Ω–∫–∏ 'time_close': {e}. –ì—Ä–∞—Ñ—ñ–∫–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –Ω–µ—Ç–æ—á–Ω–∏–º–∏.")
                # –Ø–∫—â–æ –Ω–µ–º–∞—î time_close, —Å–ø—Ä–æ–±—É—î–º–æ —Ö–æ—á–∞ –± –ø–æ —ñ–Ω–¥–µ–∫—Å—É, –∞–ª–µ —Ü–µ –º–µ–Ω—à –Ω–∞–¥—ñ–π–Ω–æ
                positions_df_cleaned.dropna(subset=['net_profit_db', 'change_balance_acc'], inplace=True)
        else:
            st.warning("–í—ñ–¥—Å—É—Ç–Ω—è –∫–æ–ª–æ–Ω–∫–∞ 'time_close' (–∞–±–æ –ø–æ–¥—ñ–±–Ω–∞) –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —É–≥–æ–¥. –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ—Ç–æ—á–Ω–∏–º.")
            positions_df_cleaned.dropna(subset=['net_profit_db', 'change_balance_acc'], inplace=True)


        if not positions_df_cleaned.empty:
            # --- 1. –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ñ—ñ—Ç ---
            st.subheader("–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ñ—ñ—Ç")
            positions_df_cleaned['cumulative_profit'] = positions_df_cleaned['net_profit_db'].cumsum()
            
            fig_cumulative_profit = px.line(
                positions_df_cleaned,
                x=positions_df_cleaned.index if 'time_close' not in positions_df_cleaned.columns or positions_df_cleaned['time_close'].isnull().all() else 'time_close',
                y='cumulative_profit',
                title="–î–∏–Ω–∞–º—ñ–∫–∞ –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ—Ç—É",
                labels={'cumulative_profit': '–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ñ—ñ—Ç', 'index': '–ù–æ–º–µ—Ä —É–≥–æ–¥–∏', 'time_close': '–ß–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è'}
            )
            fig_cumulative_profit.update_layout(xaxis_title="–ß–∞—Å/–ù–æ–º–µ—Ä —É–≥–æ–¥–∏", yaxis_title="–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ñ—ñ—Ç ($)")
            st.plotly_chart(fig_cumulative_profit, use_container_width=True)

            # --- 2. –ë–∞–ª–∞–Ω—Å (–∑–º—ñ–Ω–∞ –±–∞–ª–∞–Ω—Å—É) ---
            st.subheader("–î–∏–Ω–∞–º—ñ–∫–∞ –∑–º—ñ–Ω–∏ –±–∞–ª–∞–Ω—Å—É (–ø–æ —É–≥–æ–¥–∞—Ö)")
            # –Ø–∫—â–æ 'change_balance_acc' —Ü–µ –∞–±—Å–æ–ª—é—Ç–Ω–∏–π –±–∞–ª–∞–Ω—Å –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ—ó —É–≥–æ–¥–∏, –º–æ–∂–Ω–∞ –ø—Ä–æ—Å—Ç–æ –π–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏
            # –Ø–∫—â–æ —Ü–µ –∑–º—ñ–Ω–∞, —Ç–æ –º–æ–∂–ª–∏–≤–æ, —Ç–µ–∂ –ø–æ—Ç—Ä—ñ–±–µ–Ω –∫—É–º—É–ª—è—Ç–∏–≤–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ –∞–±–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å
            # –ù–∞—Ä–∞–∑—ñ –ø—Ä–∏–ø—É—Å—Ç–∏–º–æ, —â–æ 'change_balance_acc' - —Ü–µ —Å–∞–º –±–∞–ª–∞–Ω—Å –ø—ñ—Å–ª—è —É–≥–æ–¥–∏
            
            # –Ø–∫—â–æ —É –≤–∞—Å —î –∫–æ–ª–æ–Ω–∫–∞ –∑ –ø–æ—Ç–æ—á–Ω–∏–º –±–∞–ª–∞–Ω—Å–æ–º –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ—ó —É–≥–æ–¥–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —ó—ó.
            # –Ø–∫—â–æ 'change_balance_acc' - —Ü–µ *–∑–º—ñ–Ω–∞* –±–∞–ª–∞–Ω—Å—É –≤—ñ–¥ —É–≥–æ–¥–∏, –∞ –Ω–µ –∞–±—Å–æ–ª—é—Ç–Ω–∏–π –±–∞–ª–∞–Ω—Å,
            # —Ç–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å, –¥–æ–¥–∞–≤—à–∏ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π.
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏, –ø—Ä–∏–ø—É—Å—Ç–∏–º–æ, —â–æ 'change_balance_acc' –≤–∂–µ —î –∞–±—Å–æ–ª—é—Ç–Ω–∏–º –±–∞–ª–∞–Ω—Å–æ–º.
            # –Ø–∫—â–æ —Ü–µ –Ω–µ —Ç–∞–∫, –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –∫–æ—Ä–∏–≥—É–≤–∞—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, .cumsum(), —è–∫—â–æ —Ü–µ –¥–µ–ª—å—Ç–∏)

            fig_balance_change = px.line(
                positions_df_cleaned,
                x=positions_df_cleaned.index if 'time_close' not in positions_df_cleaned.columns or positions_df_cleaned['time_close'].isnull().all() else 'time_close',
                y='change_balance_acc',
                title="–î–∏–Ω–∞–º—ñ–∫–∞ –±–∞–ª–∞–Ω—Å—É —Ä–∞—Ö—É–Ω–∫—É",
                labels={'change_balance_acc': '–ë–∞–ª–∞–Ω—Å', 'index': '–ù–æ–º–µ—Ä —É–≥–æ–¥–∏', 'time_close': '–ß–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è'}
            )
            fig_balance_change.update_layout(xaxis_title="–ß–∞—Å/–ù–æ–º–µ—Ä —É–≥–æ–¥–∏", yaxis_title="–ë–∞–ª–∞–Ω—Å —Ä–∞—Ö—É–Ω–∫—É ($)")
            st.plotly_chart(fig_balance_change, use_container_width=True)
        else:
            st.info(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –≤ —Ç–∞–±–ª–∏—Ü—ñ '{POSITIONS_TABLE_NAME}' –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –ø—ñ—Å–ª—è –æ—á–∏—Å—Ç–∫–∏.")
else:
    st.info(f"–î–∞–Ω—ñ –∑ —Ç–∞–±–ª–∏—Ü—ñ '{POSITIONS_TABLE_NAME}' —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –∞–±–æ —Ç–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è.")


st.markdown("---")

# ---- –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –¢–ê –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø –î–ê–ù–ò–• –ü–†–û –ê–ö–ê–£–ù–¢–ò ----
st.header(f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–∫–∞—É–Ω—Ç–∏ –∑ —Ç–∞–±–ª–∏—Ü—ñ: {ACCOUNTS_TABLE_NAME}")

accounts_df = load_data(ACCOUNTS_TABLE_NAME, conn)

if not accounts_df.empty:
    # –í–∏–±–∏—Ä–∞—î–º–æ —Ç–∞ –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤—É—î–º–æ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –≤–∏–≥–ª—è–¥—É
    columns_to_display = {
        "account_id": "ID –ê–∫–∞—É–Ω—Ç—É",
        "platform": "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞",
        "user_id": "ID –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
        "broker_name": "–ë—Ä–æ–∫–µ—Ä",
        "server": "–°–µ—Ä–≤–µ—Ä",
        "deposit_currency": "–í–∞–ª—é—Ç–∞ –¥–µ–ø–æ–∑–∏—Ç—É",
        "account_type": "–¢–∏–ø –∞–∫–∞—É–Ω—Ç—É",
        "account_status": "–°—Ç–∞—Ç—É—Å –∞–∫–∞—É–Ω—Ç—É",
        "is_active": "–ê–∫—Ç–∏–≤–Ω–∏–π",
        "balance": "–ë–∞–ª–∞–Ω—Å",
        "initial_deposit": "–ü–æ—á–∞—Ç–∫–æ–≤–∏–π –¥–µ–ø–æ–∑–∏—Ç",
        "total_deposits": "–í—Å—å–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç—ñ–≤",
        "total_withdrawals": "–í—Å—å–æ–≥–æ –≤–∏–≤–µ–¥–µ–Ω–æ",
        "total_profit": "–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ—Ñ—ñ—Ç"
    }
    
    display_df = accounts_df[[col for col in columns_to_display if col in accounts_df.columns]].copy()
    display_df.rename(columns=columns_to_display, inplace=True)

    # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∏—Å–ª–æ–≤–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ (–≤–∞–ª—é—Ç–∞)
    currency_columns = [
        columns_to_display.get("balance"),
        columns_to_display.get("initial_deposit"),
        columns_to_display.get("total_deposits"),
        columns_to_display.get("total_withdrawals"),
        columns_to_display.get("total_profit")
    ]
    currency_columns = [col for col in currency_columns if col and col in display_df.columns] # –§—ñ–ª—å—Ç—Ä—É—î–º–æ None —Ç–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ

    # –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞ —á–∏—Å–ª–æ–≤—ñ –ø–µ—Ä–µ–¥ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º
    for col in currency_columns:
        display_df[col] = pd.to_numeric(display_df[col], errors='coerce')

    # –î–∏–Ω–∞–º—ñ—á–Ω–∞ —Ç–∞–±–ª–∏—Ü—è –∑ AgGrid (–ø–æ—Ç—Ä–µ–±—É—î streamlit-aggrid)
    # –í–ê–ñ–õ–ò–í–û: –î–æ–¥–∞–π—Ç–µ streamlit-aggrid –¥–æ requirements.txt
    try:
        from st_aggrid import AgGrid, GridOptionsBuilder # type: ignore
        from st_aggrid.shared import GridUpdateMode

        gb = GridOptionsBuilder.from_dataframe(display_df)
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —á–∏—Å–ª–æ–≤–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ (–≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è, —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è)
        for col_name in currency_columns:
            gb.configure_column(col_name, type=["numericColumn", "numberColumnFilter", "customNumericFormat"], precision=2, aggFunc='sum')
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –±—É–ª–µ–≤–æ—ó –∫–æ–ª–æ–Ω–∫–∏ "–ê–∫—Ç–∏–≤–Ω–∏–π"
        if columns_to_display.get("is_active") in display_df.columns:
             gb.configure_column(columns_to_display.get("is_active"), cellRenderer='agBooleanCellRenderer', editable=False)

        gb.configure_pagination(paginationAutoPageSize=True)
        gb.configure_side_bar() # –î–æ–¥–∞—î –±—ñ—á–Ω—É –ø–∞–Ω–µ–ª—å –¥–ª—è –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è, —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —Ç–æ—â–æ
        gb.configure_default_column(editable=False, filter=True, sortable=True, resizable=True)
        
        gridOptions = gb.build()

        st.subheader("–î–µ—Ç–∞–ª—å–Ω–∞ —Ç–∞–±–ª–∏—Ü—è –∞–∫–∞—É–Ω—Ç—ñ–≤ (—ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞)")
        AgGrid(
            display_df,
            gridOptions=gridOptions,
            update_mode=GridUpdateMode.MODEL_CHANGED,
            allow_unsafe_jscode=True, # –ü–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è –¥–µ—è–∫–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π AgGrid
            height=600,
            width='100%',
            fit_columns_on_grid_load=True, # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ–¥–≥–∞–Ω—è—Ç–∏ —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
            theme='streamlit' # –ê–±–æ 'alpine', 'balham', 'material'
        )
    except ImportError:
        st.warning("–î–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ, –±—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å 'streamlit-aggrid' —Ç–∞ –¥–æ–¥–∞–π—Ç–µ –¥–æ requirements.txt.")
        st.info("–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ:")
        # –°—Ç–∏–ª—ñ–∑–∞—Ü—ñ—è –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ
        st.dataframe(display_df.style.format(subset=currency_columns, formatter="{:,.2f}").hide(axis="index"))

else:
    st.info(f"–î–∞–Ω—ñ –∑ —Ç–∞–±–ª–∏—Ü—ñ '{ACCOUNTS_TABLE_NAME}' —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –∞–±–æ —Ç–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è.")

st.sidebar.info("–¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏ —á–∏ —ñ–Ω—à—É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é.")
