import streamlit as st
import pandas as pd
import plotly.express as px
from streamlit_autorefresh import st_autorefresh # <--- –Ü–ú–ü–û–†–¢

# –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ streamlit-aggrid –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
try:
    from st_aggrid import AgGrid, GridOptionsBuilder, GridUpdateMode, DataReturnMode
except ImportError:
    st.error("–ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ streamlit-aggrid –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–¥–∞–π—Ç–µ 'streamlit-aggrid' –¥–æ requirements.txt —Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –¥–æ–¥–∞—Ç–æ–∫.")
    AgGrid = None # –©–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–¥–∞–ª—å—à–∏—Ö –ø–æ–º–∏–ª–æ–∫, —è–∫—â–æ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    st.stop()

# ---- –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –°–¢–û–†–Ü–ù–ö–ò ----
st.set_page_config(
    page_title="–¢–æ—Ä–≥–æ–≤–∏–π –î–∞—à–±–æ—Ä–¥",
    page_icon="üíπ",
    layout="wide"
)

# ---- –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –û–ù–û–í–õ–ï–ù–ù–Ø ----
# –û–Ω–æ–≤–ª—é–≤–∞—Ç–∏ –∫–æ–∂–Ω—ñ 60 —Å–µ–∫—É–Ω–¥ (60000 –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥).
# –ú–æ–∂–µ—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Ü–µ–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª.
# limit - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–Ω–æ–≤–ª–µ–Ω—å (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –¥–µ–±–∞–≥—É –∞–±–æ —â–æ–± –Ω–µ –æ–Ω–æ–≤–ª—é–≤–∞–ª–æ –≤—ñ—á–Ω–æ)
# key - —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞, —è–∫—â–æ —ó—Ö –¥–µ–∫—ñ–ª—å–∫–∞.
refresh_interval_seconds = 60
refresh_count = st_autorefresh(interval=refresh_interval_seconds * 1000, limit=None, key="account_refresh")

st.title("üìä –¢–æ—Ä–≥–æ–≤–∏–π –î–∞—à–±–æ—Ä–¥ –∑ Neon DB")
if refresh_count > 0: # –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏, —â–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–±—É–≤–∞—é—Ç—å—Å—è, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ü–µ –Ω–µ –ø–µ—Ä—à–∏–π –∑–∞–ø—É—Å–∫
    st.caption(f"–°—Ç–æ—Ä—ñ–Ω–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è –∫–æ–∂–Ω—ñ {refresh_interval_seconds} —Å–µ–∫—É–Ω–¥. –û–Ω–æ–≤–ª–µ–Ω–Ω—è #{refresh_count}")


# ---- –ö–ï–®–£–í–ê–ù–ù–Ø ----
@st.cache_resource # –î–ª—è –æ–±'—î–∫—Ç—ñ–≤, —è–∫—ñ –Ω–µ –º–æ–∂–Ω–∞ —Ö–µ—à—É–≤–∞—Ç–∏ –¥–ª—è st.cache_data (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∑'—î–¥–Ω–∞–Ω–Ω—è)
def get_db_connection():
    try:
        conn_obj = st.connection("neon_db", type="sql")
        conn_obj.query("SELECT 1;")
        if 'db_connection_successful' not in st.session_state or not st.session_state.db_connection_successful :
            st.success("üéâ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö Neon DB —É—Å–ø—ñ—à–Ω–µ!") # –ü–æ–∫–∞–∑—É—î–º–æ –æ–¥–∏–Ω —Ä–∞–∑
            st.session_state.db_connection_successful = True
        return conn_obj
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
        st.session_state.db_connection_successful = False
        st.stop()

# –ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É –Ω–∞ TTL. –Ø–∫—â–æ –≤—ñ–Ω –≤–µ–ª–∏–∫–∏–π, –¥–∞–Ω—ñ –∑ –ë–î –Ω–µ –±—É–¥—É—Ç—å –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏—Å—è —á–∞—Å—Ç—ñ—à–µ, –Ω—ñ–∂ TTL.
# –î–ª—è —Ç–∞–±–ª–∏—Ü—ñ –∞–∫–∞—É–Ω—Ç—ñ–≤, —è–∫—â–æ –≤–æ–Ω–∞ –º–∞—î –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏—Å—è –∫–æ–∂–Ω—ñ 60—Å, TTL —Ç–µ–∂ –º–∞—î –±—É—Ç–∏ ~60—Å –∞–±–æ –º–µ–Ω—à–µ.
# –ê–±–æ –º–∏ –º–æ–∂–µ–º–æ –Ω–µ –∫–µ—à—É–≤–∞—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—ñ–≤, —è–∫—â–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—Ç–µ.
# –ü–æ–∫–∏ —â–æ –∑–∞–ª–∏—à–∏–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π TTL, –æ—Å–∫—ñ–ª—å–∫–∏ autorefresh –Ω–∞ 60—Å, –∞ TTL –Ω–∞ 300—Å –æ–∑–Ω–∞—á–∞—î,
# —â–æ –¥–∞–Ω—ñ –∞–∫–∞—É–Ω—Ç—ñ–≤ —Ä–µ–∞–ª—å–Ω–æ –∑ –ë–î –±—É–¥—É—Ç—å –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏—Å—è –∫–æ–∂–Ω—ñ 300—Å (5 —Ö–≤),
# –∞ —Å–∞–º —Å–∫—Ä–∏–ø—Ç –±—É–¥–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç–∏—Å—è –∫–æ–∂–Ω—ñ 60—Å.
@st.cache_data(ttl=300) # –ö–µ—à—É–≤–∞–Ω–Ω—è –Ω–∞ 5 —Ö–≤–∏–ª–∏–Ω
def load_data(table_name: str):
    local_conn = get_db_connection()
    if not local_conn:
        return pd.DataFrame()
    
    query_table_name_for_log = table_name
    try:
        # (–í–∞—à–∞ –ª–æ–≥—ñ–∫–∞ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è query_table_name –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω)
        if table_name.lower().startswith("public."):
            actual_table_name_part = table_name.split(".", 1)[1]
            if actual_table_name_part.startswith('"') and actual_table_name_part.endswith('"'):
                 query_table_name = f'public.{actual_table_name_part}'
            elif not actual_table_name_part.replace("_", "").isalnum() or actual_table_name_part[0].isdigit():
                 query_table_name = f'public."{actual_table_name_part}"'
            else:
                 query_table_name = f'public.{actual_table_name_part}'
        elif not table_name.replace("_", "").isalnum() or table_name[0].isdigit():
             query_table_name = f'public."{table_name}"'
        else:
             query_table_name = f'public.{table_name}'
        
        query_table_name_for_log = query_table_name
        query = f'SELECT * FROM {query_table_name};'
        df = local_conn.query(query)
        # –ù–µ –≤–∏–≤–æ–¥–∏–º–æ —Ç—É—Ç warning, —è–∫—â–æ –ø–æ—Ä–æ–∂–Ω—è, —â–æ–± –Ω–µ —Å–ø–∞–º–∏—Ç–∏ –ø—Ä–∏ –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ
        # if df.empty:
        #     st.warning(f"–¢–∞–±–ª–∏—Ü—è '{query_table_name}' (–∑–∞–ø–∏—Ç –¥–ª—è '{table_name}') –ø–æ—Ä–æ–∂–Ω—è –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
        return df
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∑ —Ç–∞–±–ª–∏—Ü—ñ '{table_name}' (—Å–ø—Ä–æ–±–∞ –∑–∞–ø–∏—Ç—É –¥–æ '{query_table_name_for_log}'): {e}")
        return pd.DataFrame()

# ---- –ù–ê–ó–í–ò –¢–ê–ë–õ–ò–¶–¨ –¢–ê –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø ----
ACCOUNTS_TABLE_NAME = "stat_user_account_v2"
DYNAMIC_POSITION_TABLE_NAME_TEMPLATE = "{account_id}_positions_{platform}_v2"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É (–∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω)
if 'selected_account_id' not in st.session_state:
    st.session_state.selected_account_id = None
if 'selected_account_platform' not in st.session_state:
    st.session_state.selected_account_platform = None
if 'selected_account_positions_df' not in st.session_state:
    st.session_state.selected_account_positions_df = pd.DataFrame()
if 'current_positions_table_name' not in st.session_state:
    st.session_state.current_positions_table_name = ""

# –û—Ç—Ä–∏–º—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
conn = get_db_connection()

# ---- –§–£–ù–ö–¶–Ü–Ø –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø –ì–†–ê–§–Ü–ö–Ü–í –ü–û–ó–ò–¶–Ü–ô (–±–µ–∑ –∑–º—ñ–Ω) ----
def display_position_charts(positions_df: pd.DataFrame, table_name: str, account_id_display: str):
    if positions_df.empty:
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—Ä–æ–∂–Ω—ñ –¥–∞–Ω—ñ –ø–æ–∑–∏—Ü—ñ–π –º–æ–∂–µ –±—É—Ç–∏ —Ç—É—Ç, —è–∫—â–æ —Ü–µ –Ω–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–º–∏–ª–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        # st.info(f"–î–ª—è –∞–∫–∞—É–Ω—Ç—É {account_id_display} (—Ç–∞–±–ª–∏—Ü—è {table_name}) –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")
        return

    st.header(f"–ê–Ω–∞–ª—ñ–∑ –ø–æ–∑–∏—Ü—ñ–π –¥–ª—è –∞–∫–∞—É–Ω—Ç—É {account_id_display} (—Ç–∞–±–ª–∏—Ü—è: {table_name})")

    required_cols_positions = ['net_profit_db', 'change_balance_acc', 'time_close']
    if not all(col in positions_df.columns for col in required_cols_positions):
        st.error(f"–í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—ñ '{table_name}'. –ü–æ—Ç—Ä—ñ–±–Ω—ñ: {', '.join(required_cols_positions)}. –ù–∞—è–≤–Ω—ñ: {positions_df.columns.tolist()}")
        return

    positions_df_cleaned = positions_df.copy()
    for col in ['net_profit_db', 'change_balance_acc']:
        positions_df_cleaned[col] = pd.to_numeric(positions_df_cleaned[col], errors='coerce')

    x_axis_data = positions_df_cleaned.index
    x_axis_label = '–ù–æ–º–µ—Ä —É–≥–æ–¥–∏'

    if 'time_close' in positions_df_cleaned.columns:
        try:
            temp_time_close = pd.to_datetime(positions_df_cleaned['time_close'], errors='coerce')
            if temp_time_close.isnull().all():
                #st.info(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ 'time_close' —è–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É –¥–∞—Ç—É/—á–∞—Å –¥–ª—è '{table_name}'. –°–ø—Ä–æ–±–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —è–∫ Unix timestamp...")
                temp_time_close = pd.to_datetime(positions_df_cleaned['time_close'], unit='s', origin='unix', errors='coerce')
            
            if not temp_time_close.isnull().all():
                positions_df_cleaned['time_close_dt'] = temp_time_close
                positions_df_cleaned.dropna(subset=['net_profit_db', 'change_balance_acc', 'time_close_dt'], inplace=True)
                if not positions_df_cleaned.empty: # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ—Å–ª—è dropna
                    positions_df_cleaned = positions_df_cleaned.sort_values(by='time_close_dt')
                    x_axis_data = positions_df_cleaned['time_close_dt']
                    x_axis_label = '–ß–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è'
                else: # –Ø–∫—â–æ –ø–æ—Ä–æ–∂–Ω—å–æ –ø—ñ—Å–ª—è dropna –∑ time_close_dt
                    # –°–ø—Ä–æ–±—É—î–º–æ –±–µ–∑ time_close_dt, —è–∫—â–æ –≤–æ–Ω–æ –ø—Ä–∏–∑–≤–µ–ª–æ –¥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö
                    positions_df_cleaned = positions_df.copy() # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è —Ü—ñ—î—ó –≥—ñ–ª–∫–∏
                    for col_num in ['net_profit_db', 'change_balance_acc']: # –ü–æ–≤—Ç–æ—Ä–Ω–µ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–∏—Å–ª–æ–≤–∏—Ö
                        positions_df_cleaned[col_num] = pd.to_numeric(positions_df_cleaned[col_num], errors='coerce')
                    st.warning(f"–û–±—Ä–æ–±–∫–∞ 'time_close' —è–∫ –¥–∞—Ç–∏ –ø—Ä–∏–∑–≤–µ–ª–∞ –¥–æ –ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç—É –¥–ª—è '{table_name}'. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ —ñ–Ω–¥–µ–∫—Å–æ–º.")
                    positions_df_cleaned.dropna(subset=['net_profit_db', 'change_balance_acc'], inplace=True)

            # –Ø–∫—â–æ temp_time_close –≤—Å–µ —â–µ –º—ñ—Å—Ç–∏—Ç—å —Ç—ñ–ª—å–∫–∏ NaT
            elif positions_df_cleaned['time_close'].notna().any(): # –Ø–∫—â–æ —î —Ö–æ—á —è–∫—ñ—Å—å –Ω–µ-NaN –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–º—É time_close
                #st.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ –∑ –æ–±—Ä–æ–±–∫–æ—é 'time_close' —è–∫ –¥–∞—Ç–∏/—á–∞—Å—É –¥–ª—è '{table_name}'. –°–ø—Ä–æ–±–∞ –æ–±—Ä–æ–±–∏—Ç–∏ —è–∫ —á–∏—Å–ª–æ –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è.")
                try:
                    positions_df_cleaned['time_close_numeric'] = pd.to_numeric(positions_df_cleaned['time_close'], errors='coerce')
                    positions_df_cleaned.dropna(subset=['net_profit_db', 'change_balance_acc', 'time_close_numeric'], inplace=True)
                    if not positions_df_cleaned.empty:
                        positions_df_cleaned = positions_df_cleaned.sort_values(by='time_close_numeric')
                        x_axis_data = positions_df_cleaned.index 
                        x_axis_label = '–ù–æ–º–µ—Ä —É–≥–æ–¥–∏ (–í—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–æ –∑–∞ —á–∏—Å–ª–æ–≤–∏–º time_close)'
                except Exception as e_numeric:
                     st.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ 'time_close' –Ω—ñ —è–∫ –¥–∞—Ç—É/—á–∞—Å, –Ω—ñ —è–∫ —á–∏—Å–ª–æ: {e_numeric}")
                     return # –ù–µ –º–æ–∂–µ–º–æ –±—É–¥—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫–∏
            else: # –Ø–∫—â–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π time_close –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –≤–µ—Å—å NaN
                 positions_df_cleaned.dropna(subset=['net_profit_db', 'change_balance_acc'], inplace=True)


        except Exception as e_datetime: # –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ time_close
            st.warning(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ 'time_close' –¥–ª—è '{table_name}': {e_datetime}. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ —ñ–Ω–¥–µ–∫—Å–æ–º.")
            positions_df_cleaned.dropna(subset=['net_profit_db', 'change_balance_acc'], inplace=True)
    else: # –ù–µ–º–∞—î –∫–æ–ª–æ–Ω–∫–∏ 'time_close'
        #st.warning(f"–í—ñ–¥—Å—É—Ç–Ω—è –∫–æ–ª–æ–Ω–∫–∞ 'time_close' –¥–ª—è '{table_name}'. –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ—Ç–æ—á–Ω–∏–º (—Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø–æ —ñ–Ω–¥–µ–∫—Å—É).")
        positions_df_cleaned.dropna(subset=['net_profit_db', 'change_balance_acc'], inplace=True)

    if positions_df_cleaned.empty:
        st.info(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ '{table_name}' –ø—ñ—Å–ª—è –æ—á–∏—Å—Ç–∫–∏.")
        return

    st.subheader("–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ñ—ñ—Ç")
    positions_df_cleaned['cumulative_profit'] = positions_df_cleaned['net_profit_db'].cumsum()
    fig_cumulative_profit = px.line(
        positions_df_cleaned, x=x_axis_data, y='cumulative_profit', title="–î–∏–Ω–∞–º—ñ–∫–∞ –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ—Ç—É",
        labels={'cumulative_profit': '–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ñ—ñ—Ç', (x_axis_data.name if hasattr(x_axis_data, 'name') and x_axis_data.name else 'index'): x_axis_label }
    )
    fig_cumulative_profit.update_layout(xaxis_title=x_axis_label, yaxis_title="–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ñ—ñ—Ç ($)")
    st.plotly_chart(fig_cumulative_profit, use_container_width=True)

    st.subheader("–î–∏–Ω–∞–º—ñ–∫–∞ –±–∞–ª–∞–Ω—Å—É —Ä–∞—Ö—É–Ω–∫—É")
    fig_balance_change = px.line(
        positions_df_cleaned, x=x_axis_data, y='change_balance_acc', title="–î–∏–Ω–∞–º—ñ–∫–∞ –±–∞–ª–∞–Ω—Å—É —Ä–∞—Ö—É–Ω–∫—É",
        labels={'change_balance_acc': '–ë–∞–ª–∞–Ω—Å', (x_axis_data.name if hasattr(x_axis_data, 'name') and x_axis_data.name else 'index'): x_axis_label}
    )
    fig_balance_change.update_layout(xaxis_title=x_axis_label, yaxis_title="–ë–∞–ª–∞–Ω—Å —Ä–∞—Ö—É–Ω–∫—É ($)")
    st.plotly_chart(fig_balance_change, use_container_width=True)


# ---- –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –¢–ê –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø –î–ê–ù–ò–• –ü–†–û –ê–ö–ê–£–ù–¢–ò ----
st.header(f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–∫–∞—É–Ω—Ç–∏ (–∑ —Ç–∞–±–ª–∏—Ü—ñ: {ACCOUNTS_TABLE_NAME})")
accounts_df_global = load_data(ACCOUNTS_TABLE_NAME) # –¶—è —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ–ø–µ—Ä –±—É–¥–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏—Å—è –ø—Ä–∏ –∫–æ–∂–Ω–æ–º—É –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ

if not accounts_df_global.empty:
    # (–†–µ—à—Ç–∞ –∫–æ–¥—É –¥–ª—è –æ–±—Ä–æ–±–∫–∏ accounts_df_global —Ç–∞ AgGrid –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –ø—Ä–∞–∫—Ç–∏—á–Ω–æ –±–µ–∑ –∑–º—ñ–Ω)
    required_account_cols = ["account_id", "platform"]
    if not all(col in accounts_df_global.columns for col in required_account_cols):
        missing_cols = [col for col in required_account_cols if col not in accounts_df_global.columns]
        st.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: –≤ —Ç–∞–±–ª–∏—Ü—ñ '{ACCOUNTS_TABLE_NAME}' –≤—ñ–¥—Å—É—Ç–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_cols)}. –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –Ω–µ–º–æ–∂–ª–∏–≤–∞.")
        # –ù–µ –∑—É–ø–∏–Ω—è—î–º–æ –¥–æ–¥–∞—Ç–æ–∫, —â–æ–± –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–¥–æ–≤–∂–∏–ª–æ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ —ñ, –º–æ–∂–ª–∏–≤–æ, –∫–æ–ª–æ–Ω–∫–∞ –∑'—è–≤–∏—Ç—å—Å—è
    else: # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –∫–ª—é—á–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏ —î
        accounts_df_global["account_id"] = accounts_df_global["account_id"].astype(str).str.strip()
        accounts_df_global["platform"] = accounts_df_global["platform"].astype(str).str.strip()

        columns_to_display = {
            "account_id": "ID –ê–∫–∞—É–Ω—Ç—É", "platform": "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞", "user_id": "ID –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
            "broker_name": "–ë—Ä–æ–∫–µ—Ä", "server": "–°–µ—Ä–≤–µ—Ä", "deposit_currency": "–í–∞–ª—é—Ç–∞ –¥–µ–ø–æ–∑–∏—Ç—É",
            "account_type": "–¢–∏–ø –∞–∫–∞—É–Ω—Ç—É", "account_status": "–°—Ç–∞—Ç—É—Å –∞–∫–∞—É–Ω—Ç—É", "is_active": "–ê–∫—Ç–∏–≤–Ω–∏–π",
            "balance": "–ë–∞–ª–∞–Ω—Å", "initial_deposit": "–ü–æ—á–∞—Ç–∫–æ–≤–∏–π –¥–µ–ø–æ–∑–∏—Ç",
            "total_deposits": "–í—Å—å–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç—ñ–≤", "total_withdrawals": "–í—Å—å–æ–≥–æ –≤–∏–≤–µ–¥–µ–Ω–æ",
            "total_profit": "–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ—Ñ—ñ—Ç"
        }
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∫–æ–ª–æ–Ω–∫–∏, —è–∫—ñ —Ä–µ–∞–ª—å–Ω–æ —î –≤ DataFrame, –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è–º
        existing_cols_for_display = {k: v for k, v in columns_to_display.items() if k in accounts_df_global.columns}
        display_df_accounts = accounts_df_global[list(existing_cols_for_display.keys())].copy()
        display_df_accounts.rename(columns=existing_cols_for_display, inplace=True)


        currency_columns_keys = ["balance", "initial_deposit", "total_deposits", "total_withdrawals", "total_profit"]
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤–∞–Ω—ñ –Ω–∞–∑–≤–∏ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è AgGrid
        currency_columns_renamed = [existing_cols_for_display.get(key) for key in currency_columns_keys if existing_cols_for_display.get(key) in display_df_accounts.columns]

        for col in currency_columns_renamed:
            if col in display_df_accounts.columns: # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
                display_df_accounts[col] = pd.to_numeric(display_df_accounts[col], errors='coerce')

        gb = GridOptionsBuilder.from_dataframe(display_df_accounts)
        for col_name in currency_columns_renamed:
            if col_name in display_df_accounts.columns:
                gb.configure_column(col_name, type=["numericColumn", "numberColumnFilter", "customNumericFormat"], precision=2, aggFunc='sum')
        
        active_col_renamed = existing_cols_for_display.get("is_active")
        if active_col_renamed and active_col_renamed in display_df_accounts.columns:
             gb.configure_column(active_col_renamed, cellRenderer='agBooleanCellRenderer', editable=False, width=100)

        gb.configure_selection(selection_mode='single', use_checkbox=False)
        gb.configure_pagination(paginationAutoPageSize=False, paginationPageSize=10)
        gb.configure_default_column(editable=False, filter=True, sortable=True, resizable=True)
        gridOptions = gb.build()

        st.subheader("–û–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–µ—Ç–∞–ª–µ–π –ø–æ–∑–∏—Ü—ñ–π:")
        if AgGrid: # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ AgGrid –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ
            account_grid_response = AgGrid(
                display_df_accounts, gridOptions=gridOptions, data_return_mode=DataReturnMode.AS_INPUT,
                update_mode=GridUpdateMode.MODEL_CHANGED, allow_unsafe_jscode=True, height=350,
                width='100%', fit_columns_on_grid_load=True, theme='streamlit',
                key=f"aggrid_accounts_{refresh_count}" # –î–æ–¥–∞—î–º–æ refresh_count –¥–æ –∫–ª—é—á–∞ AgGrid, —â–æ–± –≤–æ–Ω–æ –æ–Ω–æ–≤–ª—é–≤–∞–ª–æ—Å—å
            )
            
            selected_rows_df = account_grid_response.get('selected_rows')

            if selected_rows_df is not None and not selected_rows_df.empty:
                first_selected_row = selected_rows_df.iloc[0]
                
                id_col_name_display = existing_cols_for_display.get("account_id")
                platform_col_name_display = existing_cols_for_display.get("platform")

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü—ñ –∫–æ–ª–æ–Ω–∫–∏ —ñ—Å–Ω—É—é—Ç—å —É first_selected_row (Series)
                selected_account_id_from_grid = first_selected_row.get(id_col_name_display) if id_col_name_display else None
                selected_platform_from_grid = first_selected_row.get(platform_col_name_display) if platform_col_name_display else None


                if selected_account_id_from_grid is not None and selected_platform_from_grid is not None:
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∏–±—ñ—Ä –∑–º—ñ–Ω–∏–≤—Å—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–æ –∑ session_state
                    if (st.session_state.selected_account_id != str(selected_account_id_from_grid).strip() or
                        st.session_state.selected_account_platform != str(selected_platform_from_grid).strip()):
                        st.session_state.selected_account_id = str(selected_account_id_from_grid).strip()
                        st.session_state.selected_account_platform = str(selected_platform_from_grid).strip()
                        # –°–∫–∏–¥–∞—î–º–æ –¥–∞–Ω—ñ –ø–æ–∑–∏—Ü—ñ–π, —â–æ–± –≤–æ–Ω–∏ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏—Å—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–∏–±–æ—Ä—É
                        st.session_state.selected_account_positions_df = pd.DataFrame()
                        st.session_state.current_positions_table_name = ""
                        st.rerun() # –ü—Ä–∏–º—É—Å–æ–≤–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –ø—ñ–¥ –Ω–æ–≤–∏–π –≤–∏–±—ñ—Ä
                # –Ø–∫—â–æ ID –∞–±–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω—ñ, –∞–ª–µ —Ä–∞–Ω—ñ—à–µ –±—É–≤ –≤–∏–±—ñ—Ä, –Ω–µ —Å–∫–∏–¥–∞—î–º–æ –π–æ–≥–æ,
                # —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –º–µ—Ä–µ—Ö—Ç—ñ–Ω–Ω—è, —è–∫—â–æ —Ç–∞–±–ª–∏—Ü—è —Ç–∏–º—á–∞—Å–æ–≤–æ "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ" –æ–Ω–æ–≤–∏–ª–∞—Å—å.
                # elif st.session_state.selected_account_id is not None:
                #    pass # –ó–∞–ª–∏—à–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≤–∏–±—ñ—Ä

            # –ù–∞–≤—ñ—Ç—å —è–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ, –∞–ª–µ –±—É–≤ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≤–∏–±—ñ—Ä, –º–∏ –π–æ–≥–æ –Ω–µ —Å–∫–∏–¥–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ,
            # —Ö—ñ–±–∞ —â–æ —Å–ø–∏—Å–æ–∫ –∞–∫–∞—É–Ω—Ç—ñ–≤ —Å—Ç–∞–≤ –ø–æ—Ä–æ–∂–Ω—ñ–º
        else: # –Ø–∫—â–æ AgGrid –Ω–µ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ
            st.dataframe(display_df_accounts)


elif 'db_connection_successful' in st.session_state and st.session_state.db_connection_successful:
    st.info(f"–¢–∞–±–ª–∏—Ü—è –∞–∫–∞—É–Ω—Ç—ñ–≤ '{ACCOUNTS_TABLE_NAME}' –ø–æ—Ä–æ–∂–Ω—è –∞–±–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ. –û–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ {refresh_interval_seconds} —Å–µ–∫.")
    # –°–∫–∏–¥–∞—î–º–æ –≤–∏–±—ñ—Ä, —è–∫—â–æ –∞–∫–∞—É–Ω—Ç—ñ–≤ –Ω–µ–º–∞—î
    st.session_state.selected_account_id = None
    st.session_state.selected_account_platform = None
    st.session_state.selected_account_positions_df = pd.DataFrame()
    st.session_state.current_positions_table_name = ""


st.markdown("---")

# ---- –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø –ì–†–ê–§–Ü–ö–Ü–í –î–õ–Ø –í–ò–ë–†–ê–ù–û–ì–û –ê–ö–ê–£–ù–¢–£ (–ª–æ–≥—ñ–∫–∞ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è —Å—Ö–æ–∂–æ—é) ----
if st.session_state.selected_account_id and st.session_state.selected_account_platform:
    current_account_id = st.session_state.selected_account_id
    current_platform = st.session_state.selected_account_platform
    
    platform_for_table_name = current_platform
    if "metatrader 5" in current_platform.lower() or "mt5" in current_platform.lower():
        platform_for_table_name = "MT5"
    elif "metatrader 4" in current_platform.lower() or "mt4" in current_platform.lower():
        platform_for_table_name = "MT4"

    if platform_for_table_name:
        positions_table_for_account = DYNAMIC_POSITION_TABLE_NAME_TEMPLATE.format(
            account_id=current_account_id,
            platform=platform_for_table_name
        )
        
        # –£–º–æ–≤–∞ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π
        # –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ, —è–∫—â–æ:
        # 1. –ù–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ –∑–º—ñ–Ω–∏–ª–∞—Å—è (–≤–∏–±—Ä–∞–ª–∏ —ñ–Ω—à–∏–π –∞–∫–∞—É–Ω—Ç).
        # 2. DataFrame –ø–æ–∑–∏—Ü—ñ–π –ø–æ—Ä–æ–∂–Ω—ñ–π (–ø–µ—Ä—à–∏–π —Ä–∞–∑ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–ª—è —Ü—å–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É, –∞–±–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è).
        # 3. `refresh_count` –∑–º—ñ–Ω–∏–≤—Å—è, –Ü –Ω–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ *–Ω–µ* –∑–º—ñ–Ω–∏–ª–∞—Å—è (—â–æ–± –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è *—Ç–æ–≥–æ —Å–∞–º–æ–≥–æ* –∞–∫–∞—É–Ω—Ç—É).
        #    –¶—è —Ç—Ä–µ—Ç—è —É–º–æ–≤–∞ —Ç—É—Ç –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞, –±–æ load_data –¥–ª—è –ø–æ–∑–∏—Ü—ñ–π –º–∞—î —Å–≤—ñ–π TTL.
        #    –ê–≤—Ç–æ—Ä–µ—Ñ—Ä–µ—à –æ–Ω–æ–≤–ª—é—î —Å–ø–∏—Å–æ–∫ –∞–∫–∞—É–Ω—Ç—ñ–≤. –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ—Ç—ñ–º –∑–Ω–æ–≤—É –∫–ª—ñ–∫–Ω–µ –Ω–∞ —Ç–æ–π —Å–∞–º–∏–π –∞–∫–∞—É–Ω—Ç,
        #    –∞–±–æ —è–∫—â–æ –º–∏ —Ö–æ—á–µ–º–æ, —â–æ–± –¥–∞–Ω—ñ –ø–æ–∑–∏—Ü—ñ–π —Ç–µ–∂ –∞–≤—Ç–æ–æ–Ω–æ–≤–ª—é–≤–∞–ª–∏—Å—å, –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–∫—Ä–µ–º—É –ª–æ–≥—ñ–∫—É.
        #    –ü–æ–∫–∏ —â–æ –¥–∞–Ω—ñ –ø–æ–∑–∏—Ü—ñ–π –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è –ø—Ä–∏ –∑–º—ñ–Ω—ñ –≤–∏–±–æ—Ä—É –∞–∫–∞—É–Ω—Ç—É, –∞–±–æ —è–∫—â–æ —ó—Ö TTL –≤ load_data –≤–∏—á–µ—Ä–ø–∞–≤—Å—è.

        if st.session_state.current_positions_table_name != positions_table_for_account or st.session_state.selected_account_positions_df.empty:
            st.caption(f"–ê–∫–∞—É–Ω—Ç: {current_account_id}, –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {current_platform} (–¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ: {platform_for_table_name}). –û—á—ñ–∫—É–≤–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü—è: `{positions_table_for_account}`")
            with st.spinner(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –∑ {positions_table_for_account}..."):
                st.session_state.selected_account_positions_df = load_data(positions_table_for_account)
                st.session_state.current_positions_table_name = positions_table_for_account
                if not st.session_state.selected_account_positions_df.empty:
                     st.success(f"–î–∞–Ω—ñ –ø–æ–∑–∏—Ü—ñ–π –∑ '{positions_table_for_account}' —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ.")
                elif not conn.query(f"SELECT EXISTS (SELECT FROM pg_tables WHERE schemaname = 'public' AND tablename  = '{positions_table_for_account.split('.')[-1].replace('\"','')}');").iloc[0,0]:
                    st.error(f"–¢–∞–±–ª–∏—Ü—è –ø–æ–∑–∏—Ü—ñ–π '{positions_table_for_account}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.")
                else:
                    st.warning(f"–¢–∞–±–ª–∏—Ü—è –ø–æ–∑–∏—Ü—ñ–π '{positions_table_for_account}' –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞, –∞–ª–µ –ø–æ—Ä–æ–∂–Ω—è –∞–±–æ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö –¥–∞–Ω–∏—Ö.")


        # –ü–µ—Ä–µ–¥–∞—î–º–æ ID –∞–∫–∞—É–Ω—Ç—É –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
        display_position_charts(st.session_state.selected_account_positions_df, st.session_state.current_positions_table_name, current_account_id)
    else: # –Ø–∫—â–æ platform_for_table_name –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ
        st.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ —Ç–∞–±–ª–∏—Ü—ñ –ø–æ–∑–∏—Ü—ñ–π –¥–ª—è –∞–∫–∞—É–Ω—Ç—É {current_account_id} (–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {current_platform}).")

elif not accounts_df_global.empty : # –ê–∫–∞—É–Ω—Ç–∏ —î, –∞–ª–µ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ
    st.info("üìà –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç –∑ —Ç–∞–±–ª–∏—Ü—ñ –≤–∏—â–µ, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫–∏ –π–æ–≥–æ –ø–æ–∑–∏—Ü—ñ–π.")
# –Ø–∫—â–æ accounts_df_global –ø–æ—Ä–æ–∂–Ω—ñ–π, –∞–ª–µ –∑'—î–¥–Ω–∞–Ω–Ω—è –±—É–ª–æ, –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –≤–∏–≤–µ–¥–µ–Ω–µ.

st.sidebar.info("""
**–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è:**
1. –û–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç –∑—ñ —Å–ø–∏—Å–∫—É.
2. –ì—Ä–∞—Ñ—ñ–∫–∏ –ø–æ–∑–∏—Ü—ñ–π –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É –≤—ñ–¥–æ–±—Ä–∞–∑—è—Ç—å—Å—è –Ω–∏–∂—á–µ.
3. –°–ø–∏—Å–æ–∫ –∞–∫–∞—É–Ω—Ç—ñ–≤ –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.
""")
if 'db_connection_successful' in st.session_state and not st.session_state.db_connection_successful:
    st.sidebar.error("–ü—Ä–æ–±–ª–µ–º–∞ –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º –¥–æ –ë–î!")
